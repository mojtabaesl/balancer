openapi: 3.0.0
info:
  title: ArvanCloud CDN Services
  version: 4.115.7
  x-logo:
    url: "/images/other/arvan-api-docs-logo.svg"
    backgroundColor: "white"
    altText: "ArvanCloud"

servers:
  - url: https://napi.arvancloud.ir/cdn/4.0
    description: Production server (uses live data)

security:
  - UserToken: [ ]
  - ApiKey: [ ]

paths:
  # Domains
  /domains:
    get:
      summary: Get the list of domains
      description: Leaving the 'search' empty, will return all domains. Otherwise, it will filter domains containing the search keyword.
      operationId: domains.index
      tags: [ Domain ]
      parameters:
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      responses:
        200:
          description: Lists all domains belongs to the account
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Domain'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /domains/dns-service:
    post:
      summary: Create new domain
      operationId: domains.store
      tags: [ Domain ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainStore'
      responses:
        201:
          description: Successfully created the new domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get information of the domain
      operationId: domains.show
      tags: [ Domain ]
      responses:
        200:
          description: Detailed information of the domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Remove the domain
      operationId: domains.destroy
      tags: [ Domain ]
      parameters:
        - name: id
          in: query
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          description: Successfully deleted the domain
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/ns-keys:
    parameters:
      - $ref: '#/components/parameters/Domain'
    put:
      summary: Set custom NS records for the domain
      operationId: domains.nameservers.set
      tags: [ Domain ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NsKeys'
      responses:
        200:
          description: Successfully set custom NS values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NsKeysResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/Error'
    delete:
      summary: Reset custom Nameserver keys to the default values for the domain
      operationId: domains.nameservers.reset
      tags: [ Domain ]
      responses:
        200:
          description: Successfully reset to deafult NS values
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NsKeysResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/Error'
  /domains/{domain}/ns-keys/check:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Check NS to find whether domain is activated
      operationId: domains.nameservers.check
      tags: [ Domain ]
      responses:
        200:
          description: Successfully retrieve list of NS values
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/NsDomain'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/dns-service/check-ns:
    parameters:
      - $ref: '#/components/parameters/Domain'
    put:
      deprecated: true
      summary: Deprecated in favor /ns-keys/check
      operationId: domains.nameservers.deprecated-check
      tags: [ Domain ]
      parameters:
        - $ref: '#/components/parameters/Domain'
      responses:
        200:
          description: Successfully queued checking domain's NS
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/DeprecatedNs'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/ns-keys/use-optional-keys:
    parameters:
      - $ref: '#/components/parameters/Domain'
    post:
      summary: Use optional NS keys
      tags: [ Domain ]
      operationId: domains.nameservers.optional
      responses:
        200:
          description: Optional keys are set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NsKeysResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/cname-setup/custom:
    parameters:
      - $ref: '#/components/parameters/Domain'
    put:
      summary: Set a custom record for using CNAME Setup
      operationId: domains.cname-setup.set
      tags: [ Domain ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomCname'
      responses:
        200:
          description: Successfully updated the custom cname record of the domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
    delete:
      summary: Reset the custom record of CNAME Setup to the default value
      operationId: domains.cname-setup.reset
      tags: [ Domain ]
      responses:
        200:
          description: Successfully updated the custom cname record of the domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/cname-setup/convert:
    parameters:
      - $ref: '#/components/parameters/Domain'
    post:
      summary: Convert domain setup to cname
      operationId: domains.cname-setup.convert
      tags: [ Domain ]
      responses:
        200:
          description: Successfully converted the domain to use CNAME Setup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/cname-setup/check:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Check Cname Setup to find whether domain is activated
      operationId: domains.cname-setup.check
      tags: [ Domain ]
      responses:
        200:
          description: Successfully converted the domain to use CNAME Setup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/clone:
    parameters:
      - $ref: '#/components/parameters/Domain'
    post:
      summary: Clone a domain config from another one
      operationId: domains.clone
      tags: [ Domain ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneDomain'
      responses:
        200:
          $ref: '#/components/responses/OK'
        400:
          $ref: '#/components/responses/Error'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/regenerate:
    parameters:
      - $ref: '#/components/parameters/Domain'
    post:
      summary: Regenerate domain settings for edge servers
      tags: [ Domain ]
      operationId: domains.regenerate
      responses:
        202:
          description: Domain settings are regenerated successfully
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  # Domain Transfer
  /domains/transfer:
    get:
      summary: Get the list of pending transfers
      operationId: domains.transfer.index
      tags: [ Domain Transfer ]
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
        - name: type
          in: query
          schema:
            type: string
            enum:
              - all
              - incoming
              - outgoing
      responses:
        200:
          description: Lists all pending transfers
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DomainTransferData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /domains/{domain}/transfer:
    parameters:
      - $ref: '#/components/parameters/Domain'
    post:
      summary: Transfer domain to another account
      tags: [ Domain Transfer ]
      operationId: domains.transfer.store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferDomain'
      responses:
        200:
          description: the transfer request sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainTransferData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/transfer/change-status:
    post:
      summary: Accept or cancel transferring a domain
      tags: [ Domain Transfer ]
      operationId: domains.transfer.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferDomainChangeStatus'
      responses:
        200:
          description: Status Changed
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  # Plan
  /plans:
    get:
      summary: Get the list of feature defintions for plans based on different sets
      parameters:
        - $ref: '#/components/parameters/DomainQuery'
        - $ref: '#/components/parameters/IgnoredPlans'
      tags: [ Plan ]
      operationId: plans.index
      responses:
        200:
          description: List of feature defintions for plans based on different sets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanResponse'
  /domains/{domain}/plans:
    get:
      summary: Get the list of feature defintions for plans based on different sets
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/IgnoredPlans'
      tags: [ Plan ]
      operationId: domains.plans
      responses:
        200:
          description: List of feature defintions for plans based on different sets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanResponse'
  /domains/{domain}/plan:
    parameters:
      - $ref: '#/components/parameters/Domain'
    put:
      summary: Update the domain's plan
      operationId: domains.plans.update
      tags: [ Plan ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanUpdate'
      responses:
        200:
          description: Successfully updated the plan
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/plan/violations:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get violations based on plans
      operationId: domains.plans.violations
      tags: [ Plan ]
      responses:
        200:
          description: List of feature definitions and violations
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/Violations'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/plan/usages:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - name: target_plan
        in: query
        schema:
          $ref: '#/components/schemas/Plan'
        required: false
    get:
      summary: Get usages based on features and an estimated cost
      operationId: domains.plans.usages
      tags: [ Plan ]
      responses:
        200:
          description: List of features with usages and total estimated cost
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/Usages'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  # DNS
  /domains/{domain}/dns-records:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get list of DNS records
      operationId: dns-records.index
      tags: [ DNS Management ]
      parameters:
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/DnsRecordType'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
      responses:
        200:
          description: Successfully retrieved list of DNS records
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DnsRecordGeneric'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    post:
      summary: Create new DNS record
      operationId: dns-records.store
      tags: [ DNS Management ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DnsRecord'
      responses:
        201:
          description: Successfully created new DNS record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsRecordResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'

  /domains/{domain}/dns-records/{id}:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/DnsRecordId'
    get:
      summary: Get information of a record
      operationId: dns-records.show
      tags: [ DNS Management ]
      responses:
        200:
          description: Successfully retrieved the record's information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsRecordData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update a DNS record
      operationId: dns-records.update
      tags: [ DNS Management ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DnsRecord'
      responses:
        200:
          description: Successfully updated the record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsRecordResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
    delete:
      summary: Remove a DNS record
      operationId: dns-records.destroy
      tags: [ DNS Management ]
      responses:
        200:
          description: Successfully removed the record
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/dns-records/{id}/cloud:
    put:
      summary: Toggle cloud status (To proxy or not proxy, that's the question!)
      operationId: dns-records.cloud
      tags: [ DNS Management ]
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/DnsRecordId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DnsRecordCloud'
      responses:
        200:
          description: Successfully updated cloud status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsRecordResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/dns-records/import:
    post:
      summary: Import DNS records using BIND file
      operationId: dns-records.import
      tags: [ DNS Management ]
      parameters:
        - $ref: '#/components/parameters/Domain'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DnsRecordImport'
      responses:
        200:
          description: Successfully imported DNS records
          $ref: '#/components/responses/OK'
  # DNSSEC
  /domains/{domain}/dns-records/dnssec:
    get:
      summary: Get status of DNSSEC
      operationId: dns-records.dns-sec.show
      tags: [ DNS Management ]
      parameters:
        - $ref: '#/components/parameters/Domain'
      responses:
        200:
          description: Status and configuration of DNSSEC
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsSecData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/dns-records/dnssec/actions:
    put:
      summary: Update DNSSEC status
      tags: [ DNS Management ]
      operationId: dns-records.dns-sec.update
      parameters:
        - $ref: '#/components/parameters/Domain'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DnsSecStatus'
      responses:
        200:
          description: Successfully updated DNSSEC status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsSecData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  # Caching
  /domains/{domain}/caching:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get caching settings
      tags: [ Caching ]
      operationId: caching.index
      responses:
        200:
          description: Successfully retrieved caching settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheSettingsData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    patch:
      summary: Update caching settings
      tags: [ Caching ]
      operationId: caching.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CacheSettings'
      responses:
        200:
          description: Successfully updated caching settings
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
    delete:
      summary: Purge CDN Cache
      deprecated: true
      description: |
        Purge CDN cache, either by URLs, tags, or the whole site.
        Purge by tag is only available for domains with Professional plan or higher.
      tags: [ Caching ]
      operationId: caching.deprecated_purge
      parameters:
        - name: purge
          in: query
          required: true
          schema:
            type: string
            enum: [ all, individual, tags ]
            description: tags is deprecated
        - name: purge_urls
          description: URLs to be purged from cache. Required if purge value is set to individual.
          in: query
          schema:
            type: array
            minItems: 1
            maxItems: 50
            items:
              type: string
              format: url
        - name: purge_tags
          deprecated: true
          description: |
            Tags to be purged from cache. Required if purge value is set to tags.
            Each tag must be 32 characters or less. Only ASCII characters are acceptable.
          in: query
          schema:
            type: array
            minItems: 1
            maxItems: 100
            items:
              type: string
      responses:
        200:
          description: Successfully queued purgestring
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/caching/purge:
    parameters:
      - $ref: '#/components/parameters/Domain'
    post:
      summary: Purge CDN Cache
      description: |
        Purge CDN cache, either by URLs, tags, or the whole site.
        Purge by tag is only available for domains with Professional plan or higher.
      tags: [ Caching ]
      operationId: caching.purge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CachingPurge'
      responses:
        201:
          description: Successfully queued purge
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/purge-tags:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      deprecated: true
      summary: Get domain's Purge tags
      description: Returns last 100 purged tags sorted by recency.
      tags: [ Caching ]
      operationId: purge_tags.index
      responses:
        200:
          description: Successfully retrieved Domain's Purge Tags
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/DomainPurgeTags'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    delete:
      deprecated: true
      summary: Delete a Domain's Purge tag
      tags: [ Caching ]
      operationId: purge_tags.destroy
      parameters:
        - name: tag
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully Delete Domain's Purge tag
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  # LoadBalancer
  /load-balancers/regions:
    get:
      summary: Get list of regions for load balancers
      tags: [ Load Balancing ]
      operationId: load-balancers.regions.index
      responses:
        200:
          description: Successfully retrieved list of regions for load balancers
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LoadBalancerRegion'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/load-balancers/settings:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get list of domain load balancer global settings
      tags: [ Load Balancing ]
      operationId: load-balancers.settings.show
      responses:
        200:
          description: Successfully retrieved list of settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadBalancerSettingsData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    patch:
      summary: Update domain's global load balancer settings
      tags: [ Load Balancing ]
      operationId: load-balancers.settings.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadBalancerSetting'
      responses:
        200:
          description: Successfully updated settings
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/LoadBalancerSetting'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/load-balancers:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get list of load balancers
      tags: [ Load Balancing ]
      operationId: load-balancers.index
      responses:
        200:
          description: Successfully retrieved list of load balancers
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LoadBalancer'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    post:
      summary: Create a new load balancer
      tags: [ Load Balancing ]
      operationId: load-balancers.store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadBalancerStore'
      responses:
        201:
          description: Successfully created load balancer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadBalancerResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/load-balancers/{loadBalancerId}:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/LoadBalancerId'
    get:
      summary: Get load balancer information
      tags: [ Load Balancing ]
      operationId: load-balancers.show
      responses:
        200:
          description: Successfully retrieved load balancer data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadBalancerData'
    patch:
      summary: Update a load balancer
      tags: [ Load Balancing ]
      operationId: load-balancers.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadBalancer'
      responses:
        200:
          description: Successfully updated a load balancer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadBalancerResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
    put:
      summary: Update a load balancer
      tags: [ Load Balancing ]
      operationId: load-balancers.updateWithPools
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadBalancerStore'
      responses:
        200:
          description: Successfully updated a load balancer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadBalancerResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
    delete:
      summary: Remove a load balancer
      operationId: load-balancers.destroy
      tags: [ Load Balancing ]
      responses:
        200:
          description: Successfully removed a load balancer
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/load-balancers/{loadBalancerId}/pools:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/LoadBalancerId'
    get:
      summary: Get the list of pools of a load balancers
      tags: [ Load Balancing ]
      operationId: load-balancers.pools.index
      responses:
        200:
          description: Successfully retrieved list of pools of the load balancers
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LoadBalancerPool'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    post:
      summary: Create a new pool for the load balancer
      tags: [ Load Balancing ]
      operationId: load-balancers.pools.store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadBalancerPoolStore'
      responses:
        201:
          description: Successfully created pool of the load balancer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadBalancerPoolResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/load-balancers/{loadBalancerId}/prioritize:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/LoadBalancerId'
    post:
      summary: Reorder the priority of load balancer pools
      tags: [ Load Balancing ]
      operationId: load-balancers.prioritize_pool
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrioritizePool'
      responses:
        200:
          description: Successfully prioritized pools in the load balancer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadBalancerResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/load-balancers/{loadBalancerId}/pools/{loadBalancerPoolId}:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/LoadBalancerId'
      - $ref: '#/components/parameters/LoadBalancerPoolId'
    get:
      summary: Get load balancer pool information
      tags: [ Load Balancing ]
      operationId: load-balancers.pools.show
      responses:
        200:
          description: Successfully retrieved load balancer pool data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadBalancerPoolData'
    put:
      summary: Update an existing load balancer pool with origins
      tags: [ Load Balancing ]
      operationId: load-balancers.pools.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadBalancerPoolStore'
      responses:
        200:
          description: Successfully updated a load balancer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadBalancerPoolResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
    patch:
      summary: Update an existing load balancer pool without origins
      tags: [ Load Balancing ]
      operationId: load-balancers.pools.updatePool
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadBalancerPoolStore'
      responses:
        200:
          description: Successfully updated a load balancer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadBalancerPoolResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
    delete:
      summary: Remove a load balancer pool
      operationId: load-balancers.pools.destroy
      tags: [ Load Balancing ]
      responses:
        200:
          description: Successfully removed a load balancer pool
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/load-balancers/{loadBalancerId}/pools/{loadBalancerPoolId}/origins:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/LoadBalancerId'
      - $ref: '#/components/parameters/LoadBalancerPoolId'
    get:
      summary: Get list of origins of a pool
      tags: [ Load Balancing ]
      operationId: load-balancers.pools.origins.index
      responses:
        200:
          description: Successfully retrieved list of origins of a pool
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LoadBalancerOrigin'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    post:
      summary: Create a new origin in the pool of the load balancer
      tags: [ Load Balancing ]
      operationId: load-balancers.pools.origins.store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadBalancerOriginStore'
      responses:
        201:
          description: Successfully created load balancer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadBalancerOriginResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/load-balancers/{loadBalancerId}/pools/{loadBalancerPoolId}/origins/{loadBalancerPoolOriginId}:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/LoadBalancerId'
      - $ref: '#/components/parameters/LoadBalancerPoolId'
      - $ref: '#/components/parameters/LoadBalancerPoolOriginId'
    get:
      summary: Get load balancer origin information
      tags: [ Load Balancing ]
      operationId: load-balancers.pools.origins.show
      responses:
        200:
          description: Successfully retrieved the origin data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadBalancerOriginData'
    patch:
      summary: Update an existing origin of the pool
      tags: [ Load Balancing ]
      operationId: load-balancers.pools.origins.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadBalancerOriginStore'
      responses:
        200:
          description: Successfully updated the origin of the pool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadBalancerOriginResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
    delete:
      summary: Remove an origin from the pool of the load balancer
      operationId: load-balancers.pools.origins.destroy
      tags: [ Load Balancing ]
      responses:
        200:
          description: Successfully removed the origin
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  # Page-rules
  /domains/{domain}/page-rules:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get list of page-rules
      tags: [ Page Rule ]
      operationId: page-rules.index
      parameters:
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
        - name: "order"
          in: query
          description: "Sort page rules in ascending or descending order base on seq"
          schema:
            default: "desc"
            type: "string"
            enum:
              - "desc"
              - "asc"
      responses:
        200:
          description: Successfully retrieved list of page-rules
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PageRuleSummary'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    post:
      summary: Create new page-rule
      tags: [ Page Rule ]
      operationId: page-rules.store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageRule'
      responses:
        200:
          description: Successfully created new page-rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageRuleResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/page-rules/{id}:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/Id'
    get:
      summary: Get the page-rule's information
      tags: [ Page Rule ]
      operationId: page-rules.show
      responses:
        200:
          description: Successfully retrieved page-rule information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageRuleData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update the page-rule
      tags: [ Page Rule ]
      operationId: page-rules.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageRule'
      responses:
        200:
          description: Successfully updated page-rule information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageRuleResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
    patch:
      summary: Toggle status of the page-rule
      tags: [ Page Rule ]
      operationId: page-rules.status.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBooleanStatus'
      responses:
        200:
          description: Successfully updated the page-rule
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
    delete:
      summary: Delete the page-rule
      tags: [ Page Rule ]
      operationId: page-rules.destroy
      responses:
        200:
          description: Successfully deleted the page-rule
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/page-rules/{id}/purge:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/Id'
    delete:
      summary: Purge the page-rule
      tags: [ Page Rule ]
      operationId: page-rules.purge
      responses:
        200:
          description: Successfully purged page-rule
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/page-rules/{id}/diff:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/Id'
    get:
      summary: Get the page-rule's exceptions
      tags: [ Page Rule ]
      operationId: page-rules.diff.show
      responses:
        200:
          description: Successfully retrieved page-rule information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageRuleDiffData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    patch:
      summary: Update the page-rule's exceptions
      tags: [ Page Rule ]
      operationId: page-rules.diff.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageRule'
      responses:
        200:
          description: Successfully updated page-rule
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/PageRuleDiff'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  # Image Resize
  /domains/{domain}/image-resize:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get the content of image resize settings
      tags: [ Acceleration ]
      operationId: image-resize.show
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageResizeResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    patch:
      summary: Update the content of image resize settings
      tags: [ Acceleration ]
      operationId: image-resize.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageResize'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageResizeResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  # Acceleration
  /domains/{domain}/acceleration:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get the content of acceleration settings
      tags: [ Acceleration ]
      operationId: acceleration.show
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccelerationResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    patch:
      summary: Update the content of acceleration settings
      tags: [ Acceleration ]
      operationId: acceleration.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccelerationUpdate'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccelerationResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  # Custom pages
  /domains/{domain}/custom-pages:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get list of custom pages
      tags: [ Custom Pages ]
      operationId: custom-pages.show
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomPagesData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    post:
      summary: Update custom page
      tags: [ Custom Pages ]
      operationId: custom-pages.update
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomPageUpdate'
      responses:
        200:
          description: Successfully updated custom page
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  # Redirect
  /domains/{domain}/settings/www-redirect:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get redirect settings
      tags: [ Redirect ]
      operationId: redirect.show
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedirectData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: Update redirect settings
      tags: [ Redirect ]
      operationId: redirect.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Redirect'
      responses:
        200:
          description: Success
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  # Log Forwarders
  /domains/{domain}/log-forwarders:
    parameters:
      - $ref: "#/components/parameters/Domain"
    get:
      summary: Show list of log forwarders for given domain
      tags: [ Log Forwarders ]
      operationId: log-forwarders.index
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      responses:
        200:
          description: List of log forwarders
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LogForwarderSummary'
    post:
      summary: Create new log forwarder
      tags: [ Log Forwarders ]
      operationId: log-forwarders.store
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogForwarder"
      responses:
        201:
          description: Successfully created a new log forwarder
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogForwarderResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/NotFoundError"
        422:
          $ref: "#/components/responses/UnprocessableEntityError"
  /domains/{domain}/log-forwarders/{logForwarderId}:
    parameters:
      - $ref: "#/components/parameters/Domain"
    get:
      summary: Show a log forwarder's details based on given id
      tags: [ Log Forwarders ]
      operationId: log-forwarders.show
      parameters:
        - name: logForwarderId
          in: path
          description: Log Forwarder Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Details of a log forwarder
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogForwarderResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFoundError"
    put:
      summary: Update a log forwarder
      tags: [ Log Forwarders ]
      operationId: log-forwarders.update
      parameters:
        - name: logForwarderId
          in: path
          description: Log Forwarder Id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogForwarder"
      responses:
        200:
          description: Update log forwarder successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogForwarderResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/UnprocessableEntityError"
    delete:
      summary: Delete a log forwarder
      tags: [ Log Forwarders ]
      operationId: log-forwarders.destroy
      parameters:
        - name: logForwarderId
          in: path
          description: Log Forwarder Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Delete log forwarder successfully
          $ref: '#/components/responses/OK'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/AccessDenied"
  /domains/{domain}/log-forwarders/{logForwarderId}/status:
    parameters:
      - $ref: "#/components/parameters/Domain"
    patch:
      summary: Update a log forwarder's status
      tags: [ Log Forwarders ]
      operationId: log-forwarders.update.status
      parameters:
        - name: logForwarderId
          in: path
          description: Log Forwarder Id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBooleanStatus'
      responses:
        200:
          description: Update log forwarder successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogForwarderResponse"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/AccessDenied"
        422:
          $ref: "#/components/responses/UnprocessableEntityError"
  # Transport Layer Proxy
  /domains/{domain}/transport-layer-proxies:
    parameters:
      - $ref: "#/components/parameters/Domain"
    get:
      summary: Show list of transport layer proxies for given domain
      tags: [ Transport Layer Proxy ]
      operationId: transport-layer-proxies.index
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      responses:
        200:
          description: List of transport layer proxies
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TransportLayerProxy'
    post:
      summary: Create new transport layer proxy
      tags: [ Transport Layer Proxy ]
      operationId: transport-layer-proxies.store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransportLayerProxyStore'
      responses:
        201:
          description: Successfully created a new transport layer proxy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransportLayerProxyResponse'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          $ref: "#/components/responses/NotFoundError"
        422:
          $ref: "#/components/responses/UnprocessableEntityError"
  /domains/{domain}/transport-layer-proxies/{transportLayerProxyId}:
    parameters:
      - $ref: "#/components/parameters/Domain"
      - $ref: '#/components/parameters/TransportLayerProxyId'
    get:
      summary: Show a transport layer proxy's details based on given id
      tags: [ Transport Layer Proxy ]
      operationId: transport-layer-proxies.show
      responses:
        200:
          description: Show details of a transport layer proxy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransportLayerProxyResponse'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFoundError"
    put:
      summary: Update a transport layer proxy
      tags: [ Transport Layer Proxy ]
      operationId: transport-layer-proxies.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransportLayerProxyUpdate'
      responses:
        200:
          description: Update transport layer proxy successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransportLayerProxyResponse'
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFoundError"
        422:
          $ref: "#/components/responses/UnprocessableEntityError"
    delete:
      summary: delete a transport layer proxy
      tags: [ Transport Layer Proxy ]
      operationId: transport-layer-proxies.destroy
      responses:
        200:
          $ref: '#/components/responses/OK'
          description: Delete transport layer proxy successfully
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/AccessDenied"
        404:
          $ref: "#/components/responses/NotFoundError"
  # Email Forwarding
  /domains/{domain}/email-forwardings/stats:
    parameters:
      - $ref: "#/components/parameters/Domain"
    get:
      summary: Show stats of domain's email forwarding
      tags: [ Email Forwarding ]
      operationId: email-forwardings.stats
      responses:
        200:
          description: Stats of domain's email forwarding
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailForwardingStatsData'
  /domains/{domain}/email-forwardings/activate:
    parameters:
      - $ref: "#/components/parameters/Domain"
    post:
      summary: Activate email forwarding
      tags: [ Email Forwarding ]
      operationId: email-forwardings.activate
      responses:
        201:
          description: Successfully activated email forwarding
          $ref: '#/components/responses/OK'
        409:
          description: Already activated
          $ref: '#/components/responses/Conflict'
  /domains/{domain}/email-forwardings/deactivate:
    parameters:
      - $ref: "#/components/parameters/Domain"
    post:
      summary: Deactivate email forwarding
      tags: [ Email Forwarding ]
      operationId: email-forwardings.deactivate
      responses:
        200:
          description: Successfully de-activated email forwarding
          $ref: '#/components/responses/OK'
        409:
          description: Already de-activated
          $ref: '#/components/responses/Conflict'
  /domains/{domain}/email-forwardings/catch-all/activate:
    parameters:
      - $ref: "#/components/parameters/Domain"
    post:
      summary: Activate email forwarding catch all
      tags: [ Email Forwarding ]
      operationId: email-forwardings.catch_all.activate
      responses:
        200:
          description: Successfully activated email forwarding catch all
          $ref: '#/components/responses/OK'
        409:
          description: Already activated
          $ref: '#/components/responses/Conflict'
  /domains/{domain}/email-forwardings/catch-all/deactivate:
    parameters:
      - $ref: "#/components/parameters/Domain"
    post:
      summary: Deactivate email forwarding catch all
      tags: [ Email Forwarding ]
      operationId: email-forwardings.catch_all.deactivate
      responses:
        200:
          description: Successfully de-activated email forwarding catch all
          $ref: '#/components/responses/OK'
        409:
          description: Already de-activated
          $ref: '#/components/responses/Conflict'
  /domains/{domain}/email-forwardings/{emailForwardingId}/recipients:
    parameters:
      - $ref: "#/components/parameters/Domain"
      - $ref: "#/components/parameters/EmailForwarding"
    get:
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      summary: List recipients of an email forwarding
      tags: [ Email Forwarding ]
      operationId: email-forwardings.recipients.index
      responses:
        200:
          description: List recipients of an email forwarding
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailForwardingRecipientsListData"
    post:
      summary: Create new recipient
      tags: [ Email Forwarding ]
      operationId: email-forwardings.recipients.store
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailForwardingRecipientsStore"
      responses:
        201:
          description: Recipient created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/EmailForwardingRecipient'
        409:
          description: Email already
          $ref: '#/components/responses/Conflict'
  /domains/{domain}/email-forwardings/{emailForwardingId}/recipients/{emailForwardingRecipientId}:
    parameters:
      - $ref: "#/components/parameters/Domain"
      - $ref: "#/components/parameters/EmailForwarding"
      - $ref: "#/components/parameters/EmailForwardingRecipient"
    delete:
      summary: Delete a recipient
      tags: [ Email Forwarding ]
      operationId: email-forwardings.recipients.destroy
      responses:
        200:
          description: Recipient deleted successfully
          $ref: '#/components/responses/OK'
        500:
          description: Server internal error
          $ref: '#/components/responses/Error'
  /domains/{domain}/email-forwardings/{emailForwardingId}/recipients/{emailForwardingRecipientId}/set-default:
    parameters:
      - $ref: "#/components/parameters/Domain"
      - $ref: "#/components/parameters/EmailForwarding"
      - $ref: "#/components/parameters/EmailForwardingRecipient"
    patch:
      summary: Set default recipient
      tags: [ Email Forwarding ]
      operationId: email-forwardings.recipients.set_default
      responses:
        200:
          description: Default recipient is set successfully
          $ref: '#/components/responses/OK'
        403:
          description: Not allowed to perform this action
          $ref: "#/components/responses/AccessDenied"
        409:
          description: Recipient is already the default recipient
          $ref: '#/components/responses/Conflict'
  /domains/{domain}/email-forwardings/{emailForwardingId}/recipients/{emailForwardingRecipientId}/verify:
    parameters:
      - $ref: "#/components/parameters/Domain"
      - $ref: "#/components/parameters/EmailForwarding"
      - $ref: "#/components/parameters/EmailForwardingRecipient"
    post:
      summary: Verify recipient
      tags: [ Email Forwarding ]
      operationId: email-forwardings.recipients.verify
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailForwardingRecipientsVerify"
      responses:
        200:
          description: Recipient verified successfully
          $ref: '#/components/responses/OK'
        409:
          description: Recipient is already verified
          $ref: '#/components/responses/Conflict'
  /domains/{domain}/email-forwardings/{emailForwardingId}/recipients/{emailForwardingRecipientId}/resend-verification:
    parameters:
      - $ref: "#/components/parameters/Domain"
      - $ref: "#/components/parameters/EmailForwarding"
      - $ref: "#/components/parameters/EmailForwardingRecipient"
    post:
      summary: Resend Verification
      tags: [ Email Forwarding ]
      operationId: email-forwardings.recipients.resend_verification
      responses:
        200:
          description: Verification sent successfully
          $ref: '#/components/responses/OK'
        409:
          description: Recipient is already verified
          $ref: '#/components/responses/Conflict'
  /domains/{domain}/email-forwardings/{emailForwardingId}/aliases:
    parameters:
      - $ref: "#/components/parameters/Domain"
      - $ref: "#/components/parameters/EmailForwarding"
    get:
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      summary: List of email forwarding aliases for given domain
      tags: [ Email Forwarding ]
      operationId: email-forwardings.aliases.index
      responses:
        200:
          description: List recipients of an email forwarding
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailForwardingAliasesListData"
    post:
      summary: Create new alias
      tags: [ Email Forwarding ]
      operationId: email-forwardings.aliases.store
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailForwardingAliasesStore"
      responses:
        201:
          description: Alias created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    $ref: "#/components/schemas/EmailForwardingAlias"
  /domains/{domain}/email-forwardings/{emailForwardingId}/aliases/{emailForwardingAliasId}:
    parameters:
      - $ref: "#/components/parameters/Domain"
      - $ref: "#/components/parameters/EmailForwarding"
      - $ref: "#/components/parameters/EmailForwardingAlias"
    delete:
      summary: Delete an alias
      tags: [ Email Forwarding ]
      operationId: email-forwardings.aliases.destroy
      responses:
        204:
          description: Alias deleted successfully
          $ref: '#/components/responses/OK'
  /domains/{domain}/email-forwardings/{emailForwardingId}/aliases/{emailForwardingAliasId}/toggle-activation:
    parameters:
      - $ref: "#/components/parameters/Domain"
      - $ref: "#/components/parameters/EmailForwarding"
      - $ref: "#/components/parameters/EmailForwardingAlias"
    patch:
      summary: Toggle alias activation
      tags: [ Email Forwarding ]
      operationId: email-forwardings.aliases.toggle_activation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailForwardingAliasesToggleActivation"
      responses:
        204:
          description: Alias deleted successfully
          $ref: '#/components/responses/OK'
  /domains/{domain}/email-forwardings/{emailForwardingId}/aliases/{emailForwardingAliasId}/recipients:
    parameters:
      - $ref: "#/components/parameters/Domain"
      - $ref: "#/components/parameters/EmailForwarding"
      - $ref: "#/components/parameters/EmailForwardingAlias"
    patch:
      summary: Update alias recipients
      tags: [ Email Forwarding ]
      operationId: email-forwardings.aliases.update_recipients
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailForwardingAliasesRecipients"
      responses:
        200:
          description: Recipients updated successfully
          $ref: '#/components/responses/OK'
  # Troubleshoots
  /domains/{domain}/troubleshoots:
    parameters:
      - $ref: "#/components/parameters/Domain"
    get:
      summary: Show list of troubleshoots for given domain
      tags: [ Troubleshoot ]
      operationId: troubleshoots.index
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      responses:
        200:
          description: List of troubleshoots
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Troubleshoot'
    post:
      summary: Create new troubleshoot
      tags: [ Troubleshoot ]
      operationId: troubleshoots.store
      responses:
        201:
          description: Successfully created a new troubleshoot
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/Troubleshoot'
        429:
          $ref: "#/components/responses/TrottleRequests"
        404:
          $ref: "#/components/responses/NotFoundError"
  /domains/{domain}/troubleshoots/latest:
    parameters:
      - $ref: "#/components/parameters/Domain"
    get:
      summary: Show the latest troubleshoot for given domain
      tags: [ Troubleshoot ]
      operationId: troubleshoots.latest
      responses:
        200:
          description: Details of a troubleshoot
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/Troubleshoot'
  # Reports
  /domains/{domain}/reports/traffics:
    get:
      summary: Get traffic report for domain
      tags: [ Reports ]
      operationId: reports.traffics.total
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
        - $ref: '#/components/parameters/ReportSince'
        - $ref: '#/components/parameters/ReportUntil'
        - $ref: '#/components/parameters/FilterSubdomain'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrafficsData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/traffics/saved:
    get:
      summary: Get traffic saved to total pie chart
      tags: [ Reports ]
      operationId: reports.traffics.saved
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
        - $ref: '#/components/parameters/ReportSince'
        - $ref: '#/components/parameters/ReportUntil'
        - $ref: '#/components/parameters/FilterSubdomain'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedTrafficsData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/traffics/map:
    get:
      summary: Get traffic as geo-map
      tags: [ Reports ]
      operationId: reports.traffics.map
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
        - $ref: '#/components/parameters/ReportSince'
        - $ref: '#/components/parameters/ReportUntil'
        - $ref: '#/components/parameters/FilterSubdomain'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapTrafficsData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/visitors:
    get:
      summary: Get report of visitors for domain
      tags: [ Reports ]
      operationId: reports.visitors.index
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
        - $ref: '#/components/parameters/ReportSince'
        - $ref: '#/components/parameters/ReportUntil'
        - $ref: '#/components/parameters/FilterSubdomain'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisitorsData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/high-request-ips:
    get:
      summary: Get report of IPs with highest number of requests
      tags: [ Reports ]
      operationId: reports.visitors.high-request-ips
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
        - $ref: '#/components/parameters/ReportSince'
        - $ref: '#/components/parameters/ReportUntil'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HighRequestedIp'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/response-time:
    get:
      summary: Get response time report
      tags: [ Reports ]
      operationId: reports.response-time.index
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
        - $ref: '#/components/parameters/ReportSince'
        - $ref: '#/components/parameters/ReportUntil'
        - $ref: '#/components/parameters/FilterSubdomain'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseTimeData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/status:
    get:
      summary: Get status codes pie chart
      tags: [ Reports ]
      operationId: reports.status.index
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
        - $ref: '#/components/parameters/ReportSince'
        - $ref: '#/components/parameters/ReportUntil'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCodeReportData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/status/summary:
    get:
      summary: Get an overview of status codes pie chart
      tags: [ Reports ]
      operationId: reports.status.summary
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
        - $ref: '#/components/parameters/ReportSince'
        - $ref: '#/components/parameters/ReportUntil'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCodeSummaryData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/error-logs:
    get:
      summary: Get list of errors
      tags: [ Reports ]
      operationId: reports.error-logs
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
        - $ref: '#/components/parameters/ReportSince'
        - $ref: '#/components/parameters/ReportUntil'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLogsData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/error-logs/chart:
    get:
      summary: Get chart view of errors
      tags: [ Reports ]
      operationId: reports.error-logs.chart
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
        - $ref: '#/components/parameters/ReportSince'
        - $ref: '#/components/parameters/ReportUntil'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorLogChartData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/error-log-details:
    get:
      deprecated: true
      summary: Get detail of an error
      tags: [ Reports ]
      operationId: reports.error-log-details
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
        - $ref: '#/components/parameters/ReportSince'
        - $ref: '#/components/parameters/ReportUntil'
        - name: error
          in: query
          description: Error message to search for
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/dns-requests:
    get:
      summary: Get response time report
      tags: [ Reports ]
      operationId: reports.dns.requests
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
        - $ref: '#/components/parameters/ReportSince'
        - $ref: '#/components/parameters/ReportUntil'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsRequestReportData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/dns-geo:
    get:
      summary: Get DNS requests as geo-map
      tags: [ Reports ]
      operationId: reports.dns.geo
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
        - $ref: '#/components/parameters/ReportSince'
        - $ref: '#/components/parameters/ReportUntil'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsGeoReportData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/attacks:
    get:
      summary: Get report of attacks
      tags: [ Reports ]
      operationId: reports.attacks.show
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/AttackReport'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/attacks/list:
    get:
      summary: Get list of attacks details
      tags: [ Reports ]
      operationId: reports.attacks.index
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AttackReportItem'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/attacks/attackers:
    get:
      summary: Get list of attackers information
      tags: [ Reports ]
      operationId: reports.attacks.attackers
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataResponse'
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        ip:
                          type: string
                          format: ipv4
                        count:
                          type: integer
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/attacks/map:
    get:
      summary: Get geo-map of attacks
      tags: [ Reports ]
      operationId: reports.attacks.map
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttackReportMapData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/attacks/uri:
    get:
      summary: Get list of URLs under attack
      tags: [ Reports ]
      operationId: reports.attacks.uri
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/ReportPeriod'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttackReportUriData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/reports/transport-layer-proxies/{transportLayerProxyId}/traffics:
    get:
      summary: Get traffic report for transport layer proxy
      tags: [ Reports ]
      operationId: reports.transport_layer_proxies.traffics
      parameters:
        - $ref: '#/components/parameters/Domain'
        - $ref: '#/components/parameters/TransportLayerProxyId'
        - $ref: '#/components/parameters/ReportPeriod'
        - $ref: '#/components/parameters/ReportSince'
        - $ref: '#/components/parameters/ReportUntil'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransportLayerProxyTrafficsData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
        404:
          $ref: '#/components/responses/NotFoundError'
  # Bulk Report
  /bulk/reports/traffics:
    post:
      summary: Get traffic report for multiple domains
      tags: [ Reports ]
      operationId: bulk-reports.traffics.total
      parameters:
        - $ref: '#/components/parameters/ReportPeriod'
        - $ref: '#/components/parameters/ReportSince'
        - $ref: '#/components/parameters/ReportUntil'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                domains:
                  description: List of domains' IDs
                  type: array
                  items:
                    type: string
                    format: uuid
                excludeSubdomains:
                  type: boolean
                  description: Whether to include sub-domains or report only root domain traffic
      responses:
        200:
          description: Bulk operation was successful, see items for status of each item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkTrafficReportData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /bulk/reports/visitors:
    post:
      summary: Get visitor report for multiple domains
      tags: [ Reports ]
      operationId: bulk-reports.visitors.total
      parameters:
        - $ref: '#/components/parameters/ReportPeriod'
        - $ref: '#/components/parameters/ReportSince'
        - $ref: '#/components/parameters/ReportUntil'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                domains:
                  description: List of domains' IDs
                  type: array
                  items:
                    type: string
                    format: uuid
                excludeSubdomains:
                  description: Whether to include sub-domains or report only root domain traffic
      responses:
        200:
          description: Bulk operation was successful, see items for status of each item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkVisitorReportData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/firewall/settings:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get domain's firewall configuration
      tags: [ Firewall ]
      operationId: firewall.settings.index
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/FirewallSettingsView'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    patch:
      summary: Update domain's firewall configuration
      tags: [ Firewall ]
      operationId: firewall.settings.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FirewallSettings'
      responses:
        200:
          description: Updated Successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/FirewallSettingsView'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/firewall/rules:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get domain's firewall rules
      tags: [ Firewall ]
      operationId: firewall.rules.index
      parameters:
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
        - name: order_by
          in: query
          schema:
            type: string
            enum:
              - priority
              - created_at
        - name: order_type
          in: query
          schema:
            type: string
            enum:
              - desc
              - asc
        - name: search
          in: query
          schema:
            type: string
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FirewallRuleView'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    post:
      summary: Create new firewall rule
      tags: [ Firewall ]
      operationId: firewall.rules.store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FirewallRule'
      responses:
        201:
          description: Successfully created firewall rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallRuleResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/firewall/rules/{id}:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/Id'
    get:
      summary: Get firewall rule information
      tags: [ Firewall ]
      operationId: firewall.rules.show
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallRuleResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    patch:
      summary: Update the firewall rule
      tags: [ Firewall ]
      operationId: firewall.rules.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FirewallRule'
      responses:
        200:
          description: Successfully updated the rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallRuleResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Delete firewall rule
      tags: [ Firewall ]
      operationId: firewall.rules.destroy
      responses:
        200:
          description: Successfully deleted the rule.
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/firewall/actions/reprioritize:
    parameters:
      - $ref: '#/components/parameters/Domain'
    post:
      summary: Change priority of firewall rules
      description: |
        You can choose a firewall rule and request to put it after or before another rule.
        You should only provide either after_rule_id or before_rule_id (and not both of them).
      tags: [ Firewall ]
      operationId: firewall.reprioritize
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReprioritizeRuleRequest'
      responses:
        200:
          description: Successfully changed the priority of the rule.
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /waf:
    get:
      summary: Get WAF presets
      tags: [ WAF ]
      operationId: global.waf.index
      responses:
        200:
          description: Found list of presets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WafPresetsData'
        404:
          $ref: '#/components/responses/NotFoundError'
  /waf/packages/{packageId}:
    parameters:
      - $ref: '#/components/parameters/PackageId'
    get:
      summary: Get WAF package details
      tags: [ WAF ]
      operationId: global.waf.show_package
      responses:
        200:
          description: Retrieved detail of package
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WafPackageDetailsData'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/waf/settings:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get WAF configuration
      tags: [ WAF ]
      operationId: waf.settings.index
      responses:
        200:
          description: Successfully retrieved list of WAF settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WafSettingsData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    patch:
      summary: Configure WAF module of the domain
      tags: [ WAF ]
      operationId: waf.settings.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WafSettings'
      responses:
        200:
          description: Successfully retrieved list of WAF settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WafSettingsData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/waf/actions/reconfigure:
    parameters:
      - $ref: '#/components/parameters/Domain'
    post:
      summary: Reconfigure WAF module using a preset
      description: |
        It remove all existing WAF packages and configures packages as defined in the preset
      tags: [ WAF ]
      operationId: waf.reconfigure
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WafReconfigure'
      responses:
        200:
          description: Successfully changed the priority of the rule.
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/waf/actions/reprioritize:
    parameters:
      - $ref: '#/components/parameters/Domain'
    post:
      summary: Change priority of WAF rules
      description: |
        You can choose a WAF rule and request to put it after or before another rule.
        You should only provide either after_rule_id or before_rule_id (and not both of them).
      tags: [ WAF ]
      operationId: waf.reprioritize
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReprioritizeRuleRequest'
      responses:
        200:
          description: Successfully changed the priority of the rule.
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/waf/actions/reprioritize-package:
    parameters:
      - $ref: '#/components/parameters/Domain'
    post:
      summary: Change priority of WAF packages
      description: |
        You can choose a WAF package and request to put it after or before another one.
        You should only provide either after_package_id or before_package_id (and not both of them).
      tags: [ WAF ]
      operationId: waf.package.reprioritize
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WafReprioritize'
      responses:
        200:
          description: Successfully changed the priority of the package.
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/waf/rules:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get WAF Rules
      tags: [ WAF ]
      operationId: waf.rules.index
      parameters:
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
        - name: order_by
          in: query
          schema:
            type: string
            enum:
              - priority
              - created_at
        - name: order_type
          in: query
          schema:
            type: string
            enum:
              - desc
              - asc
        - name: search
          in: query
          schema:
            type: string
      responses:
        200:
          description: Successfully created WAF rule
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WafRule'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    post:
      summary: Create new WAF rule
      tags: [ WAF ]
      operationId: waf.rules.store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WafRule'
      responses:
        201:
          description: Successfully created WAF rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WafRuleResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/waf/rules/{id}:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/Id'
    get:
      summary: Get WAF rule information
      tags: [ WAF ]
      operationId: waf.rules.show
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WafRuleResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    patch:
      summary: Update the WAF rule
      tags: [ WAF ]
      operationId: waf.rules.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WafRule'
      responses:
        200:
          description: Successfully updated the rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WafRuleResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Delete WAF rule
      tags: [ WAF ]
      operationId: waf.rules.destroy
      responses:
        200:
          description: Successfully deleted the rule.
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/waf/packages:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get WAF packages
      description: |
        By passing `available` parameter in query string, it will return available packages for this domain.
        Otherwise it lists currently added packages.
      tags: [ WAF ]
      operationId: waf.packages.index
      parameters:
        - in: query
          name: available
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Retrieved list of WAF packages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainWafPackagesData'
    post:
      summary: Add new WAF package to domain
      tags: [ WAF ]
      operationId: waf.packages.store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainWafPackageStore'
      responses:
        200:
          description: Successfully added WAF package
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/DomainWafPackage'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/waf/packages/{id}:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - name: id
        in: path
        schema:
          type: string
        required: true
    get:
      summary: Get WAF package information
      tags: [ WAF ]
      operationId: waf.packages.show
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainWafPackageDetailsData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    patch:
      summary: Update the WAF package
      tags: [ WAF ]
      operationId: waf.packages.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainWafPackage'
      responses:
        200:
          description: Successfully updated the package.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/DomainWafPackageDetails'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Delete WAF package from domain
      tags: [ WAF ]
      operationId: waf.packages.destroy
      responses:
        200:
          description: Successfully deleted the package.
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/ddos/settings:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get DDoS protection settings
      tags: [ DDoS ]
      operationId: ddos.settings.index
      responses:
        200:
          description: Successfully retrieved DDoS settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DdosSettingsData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    patch:
      summary: Update domain's DDoS protection configuration
      tags: [ DDoS ]
      operationId: ddos.settings.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DdosSettings'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/DdosSettings'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/ddos/rules:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get DDoS Protection Rules
      tags: [ DDoS ]
      operationId: ddos.rules.index
      parameters:
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
        - name: order_by
          in: query
          schema:
            type: string
            enum:
              - priority
              - created_at
        - name: order_type
          in: query
          schema:
            type: string
            enum:
              - desc
              - asc
        - name: search
          in: query
          schema:
            type: string
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DdosRule'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    post:
      summary: Create new DDoS protection rule
      tags: [ DDoS ]
      operationId: ddos.rules.store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DdosRule'
      responses:
        201:
          description: Successfully created DDoS rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DdosRuleResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/ddos/rules/{id}:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/Id'
    get:
      summary: Get DDoS protection's rule information
      tags: [ DDoS ]
      operationId: ddos.rules.show
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DdosRuleData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    patch:
      summary: Update the DDoS protection rule
      tags: [ DDoS ]
      operationId: ddos.rules.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DdosRule'
      responses:
        200:
          description: Successfully updated the rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DdosRuleResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Delete DDoS protection rule
      tags: [ DDoS ]
      operationId: ddos.rules.destroy
      responses:
        200:
          description: Successfully deleted the rule.
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/ddos/actions/reprioritize:
    parameters:
      - $ref: '#/components/parameters/Domain'
    post:
      summary: Change priority of ddos rules
      description: |
        You can choose a DDoS rule and request to put it after or before another rule.
        You should only provide either after_rule_id or before_rule_id (and not both of them).
      tags: [ DDoS ]
      operationId: ddos.reprioritize
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReprioritizeRuleRequest'
      responses:
        200:
          description: Successfully changed the priority of the rule.
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/rate-limit/settings:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get Rate limiting settings
      tags: [ Rate Limiting ]
      operationId: rate-limiting.settings.index
      responses:
        200:
          description: Successfully retrieved Rate-Limit settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitSettingsData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    patch:
      summary: Update domain's Rate limiting configuration
      tags: [ Rate Limiting ]
      operationId: rate-limiting.settings.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateLimitSettings'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/RateLimitSettings'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/rate-limit/rules:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get Rate limiting rules
      tags: [ Rate Limiting ]
      operationId: rate-limiting.rules.index
      parameters:
        - name: per_page
          in: query
          schema:
            type: integer
            minimum: 1
        - name: order_by
          in: query
          schema:
            type: string
            enum:
              - priority
              - created_at
        - name: order_type
          in: query
          schema:
            type: string
            enum:
              - desc
              - asc
        - name: search
          in: query
          schema:
            type: string
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RateLimitRuleView'
    post:
      summary: Store new Rate limiting rule
      tags: [ Rate Limiting ]
      operationId: rate-limiting.rules.store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateLimitRule'
      responses:
        201:
          description: Successfully created Rate-Limit rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitRuleData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/rate-limit/rules/{id}:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/Id'
    get:
      summary: Get Rate limiting's rule information
      tags: [ Rate Limiting ]
      operationId: rate-limiting.rules.show
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitRuleData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    patch:
      summary: Update the Rate limiting's rule
      tags: [ Rate Limiting ]
      operationId: rate-limiting.rules.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateLimitRule'
      responses:
        200:
          description: Successfully updated the rule.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/RateLimitRuleView'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: Delete Rate limiting's rule
      tags: [ Rate Limiting ]
      operationId: rate-limiting.rules.destroy
      responses:
        200:
          description: Successfully deleted the rule.
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/rate-limit/actions/reprioritize:
    parameters:
      - $ref: '#/components/parameters/Domain'
    post:
      summary: Change priority of Rate limiting's rules
      description: |
        You can choose a rule and request to put it after or before another rule.
        You should only provide either after_rule_id or before_rule_id (and not both of them).
      tags: [ Rate Limiting ]
      operationId: rate-limiting.actions.reprioritize
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReprioritizeRuleRequest'
      responses:
        200:
          description: Successfully changed the priority of the rule.
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  # CDN-Apps
  /apps:
    get:
      summary: Get list of all available cdn-apps
      tags: [ CDN Apps ]
      operationId: apps.index
      parameters:
        - $ref: '#/components/parameters/CategoryId'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/CdnAppSortBy'
        - $ref: '#/components/parameters/Direction'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CdnApp'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /apps/{id}:
    parameters:
      - $ref: '#/components/parameters/Id'
    get:
      summary: Get a single cdn-app
      tags: [ CDN Apps ]
      operationId: apps.show
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdnAppData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    post:
      summary: Expressing like and dislike about a single cdn-app
      tags: [ CDN Apps ]
      operationId: apps.like
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CdnAppLike'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdnAppLikeStatsData'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/apps:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get list of all applications installed on a domain
      tags: [ CDN Apps ]
      operationId: domains.apps.index
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CdnApp'
  /domains/{domain}/apps/{id}:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/Id'
    get:
      summary: Check the application is installed on the domain
      tags: [ CDN Apps ]
      operationId: domains.apps.installed
      responses:
        200:
          description: Successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdnAppInstall'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
    post:
      summary: Install the application on the domain
      tags: [ CDN Apps ]
      operationId: domains.apps.store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppOptions'
      responses:
        200:
          description: Successfully installed the application.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/DomainCdnApp'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
    delete:
      summary: Uninstall the application from domain
      tags: [ CDN Apps ]
      operationId: domains.apps.destroy
      responses:
        200:
          description: Successfully uninstalled the app.
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/apps/{id}/actions/trigger_webhook:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/Id'
    post:
      summary: trigger webhook event
      tags: [ CDN Apps ]
      operationId: domains.apps.trigger-webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CdnAppTriggerWebhook'
      responses:
        200:
          description: Successfully triggered webhook.
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  # CDN-Apps Category
  /apps/category:
    get:
      summary: Get the list of application categories
      operationId: apps.category.index
      tags: [ CDN Apps ]
      parameters:
        - $ref: '#/components/parameters/ApplicationCategories'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApplicationCategory'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /apps/category/{application-category}:
    get:
      summary: Get an existing application category
      operationId: apps.category.show
      tags: [ CDN Apps ]
      parameters:
        - $ref: '#/components/parameters/ApplicationCategory'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    $ref: '#/components/schemas/ApplicationCategory'
  # SSL
  /domains/{domain}/ssl:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get SSL settings
      tags: [ SSL/TLS ]
      operationId: ssl.index
      responses:
        200:
          description: Successfully retrieved SSL settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SslResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    patch:
      summary: Update domain's SSL settings
      tags: [ SSL/TLS ]
      operationId: ssl.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SslUpdate"
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SslResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/ssl/certificates:
    parameters:
      - $ref: '#/components/parameters/Domain'
    post:
      summary: Upload Certificate
      tags: [ SSL/TLS ]
      operationId: ssl.cert.store
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CertificateStore'
      responses:
        201:
          description: Successful
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/ssl/certificates/{id}:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/Id'
    delete:
      summary: Delete an unused customer certificate
      tags: [ SSL/TLS ]
      operationId: ssl.cert.destroy
      responses:
        200:
          description: Successful
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /domains/{domain}/ssl/orders:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get All Managed certificate orders history
      tags: [ SSL/TLS ]
      operationId: ssl.cert.order.index
      responses:
        200:
          description: Successfully retrieved Managed SSL orders info
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CertificateOrder'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/ssl/orders/action/retry:
    parameters:
      - $ref: '#/components/parameters/Domain'
    post:
      summary: Retry a previously `killed` order
      tags: [ SSL/TLS ]
      operationId: ssl.cert.order.retry
      responses:
        201:
          description: Successfully placed a retry order
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  # HealthCheck
  /domains/{domain}/health-checks:
    parameters:
      - $ref: '#/components/parameters/Domain'
    get:
      summary: Get Defined HealthCheck
      tags: [ Active Health Check ]
      operationId: active-health-check.index
      responses:
        200:
          description: Successfully retrieved HealthCheck settings
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HealthCheckView'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    post:
      summary: Store a new HealthCheck
      tags: [ Active Health Check ]
      operationId: active-health-check.store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HealthCheck'
      responses:
        201:
          description: Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
  /domains/{domain}/health-checks/{healthcheck}:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/HealthCheck'
    get:
      summary: Get a single healthcheck
      tags: [ Active Health Check ]
      operationId: active-health-check.show
      responses:
        200:
          description: Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    patch:
      summary: Update Health check
      tags: [ Active Health Check ]
      operationId: active-health-check.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HealthCheck'
      responses:
        200:
          description: Successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
    delete:
      summary: Delete healthcheck
      tags: [ Active Health Check ]
      operationId: active-health-check.destroy
      responses:
        200:
          description: Successfully deleted the resource.
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/health-checks/reports/summary:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/HealthCheckName'
      - $ref: '#/components/parameters/HealthCheckUpstream'
      - $ref: '#/components/parameters/ReportPeriod'
      - $ref: '#/components/parameters/ReportSince'
      - $ref: '#/components/parameters/ReportUntil'
      - $ref: '#/components/parameters/Direction'
    get:
      summary: Get summary reports of a single healthcheck monitoring
      tags: [ Active Health Check ]
      operationId: active-health-check.reports.summary
      responses:
        200:
          description: Successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HealthCheckReportSummary'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  /domains/{domain}/health-checks/reports/details:
    parameters:
      - $ref: '#/components/parameters/Domain'
      - $ref: '#/components/parameters/HealthCheckName'
      - $ref: '#/components/parameters/HealthCheckUpstream'
      - $ref: '#/components/parameters/HealthCheckReportType'
      - $ref: '#/components/parameters/ReportPeriod'
      - $ref: '#/components/parameters/ReportSince'
      - $ref: '#/components/parameters/ReportUntil'
      - $ref: '#/components/parameters/Direction'
      - $ref: '#/components/parameters/PerPage'
      - $ref: '#/components/parameters/Page'
    get:
      summary: Get reports of a single healthcheck monitoring
      tags: [ Active Health Check ]
      operationId: active-health-check.reports.details
      responses:
        200:
          description: Successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HealthCheckReportDetail'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
  # HealthCheck Zones
  /health-checks/zones:
    get:
      summary: Get list of all health-check zones
      tags: [ Active Health Check ]
      operationId: health-checks.zones.index
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DataWithMessageResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HealthCheckZoneName'
  /dynamic-fields:
    get:
      summary: Get the list of Lists
      tags: [ List ]
      operationId: lists.index
      parameters:
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/DynamicFieldScope'
        - $ref: '#/components/parameters/DynamicFieldType'
        - $ref: '#/components/parameters/DynamicFieldName'
      responses:
        200:
          description: Successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DynamicField'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
    post:
      summary: Store new List
      tags: [ List ]
      operationId: lists.store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DynamicField'
      responses:
        201:
          description: Successfully created List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicFieldResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
  /dynamic-fields/{id}:
    parameters:
      - $ref: '#/components/parameters/Id'
    get:
      summary: Get an existing List
      operationId: lists.show
      tags: [ List ]
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicFieldData'
    patch:
      summary: Update an existing List
      tags: [ List ]
      operationId: lists.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DynamicField'
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicFieldResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        422:
          $ref: '#/components/responses/UnprocessableEntityError'
    delete:
      summary: Delete List
      tags: [ List ]
      operationId: lists.destroy
      responses:
        200:
          description: Deleted successfully
          $ref: '#/components/responses/OK'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
components:
  parameters:
    Domain:
      name: domain
      in: path
      description: Domain name
      required: true
      schema:
        type: string
        format: hostname
      example: example.com
    DomainQuery:
      name: domain
      in: query
      description: Domain name or id
      required: false
      schema:
        anyOf:
          - type: string
            format: hostname
            example: example.com
          - type: string
            format: uuid
    EmailForwarding:
      name: emailForwardingId
      in: path
      description: Email forwarding id
      required: true
      schema:
        type: string
        format: uuid
    EmailForwardingRecipient:
      name: emailForwardingRecipientId
      in: path
      description: Email forwarding recipient id
      required: true
      schema:
        type: string
        format: uuid
    EmailForwardingAlias:
      name: emailForwardingAliasId
      in: path
      description: Email forwarding alias id
      required: true
      schema:
        type: string
        format: uuid
    IgnoredPlans:
      name: ignored_plans
      in: query
      description: Comma separaterd plan levels to ignore
      required: false
      schema:
        type: string
      example: "0,1"
    TransportLayerProxyId:
      name: transportLayerProxyId
      in: path
      description: Transport layer proxy id
      required: true
      schema:
        type: string
        format: uuid
    WafPackageId:
      name: wafPackageId
      in: path
      description: Id of a WAF package
      required: true
      schema:
        type: string
      example: comodo
    Id:
      name: id
      in: path
      schema:
        type: string
        format: uuid
      required: true
    LoadBalancerId:
      name: loadBalancerId
      description: ID of the load balancer
      in: path
      schema:
        type: string
        format: uuid
      required: true
    LoadBalancerPoolId:
      name: loadBalancerPoolId
      description: ID of a pool of the load balancer
      in: path
      schema:
        type: string
        format: uuid
      required: true
    LoadBalancerPoolOriginId:
      name: loadBalancerPoolOriginId
      description: ID of an origin of the pool in the load balancer
      in: path
      schema:
        type: string
        format: uuid
      required: true
    PackageId:
      name: packageId
      in: path
      schema:
        type: string
      required: true
    DnsRecordId:
      name: id
      description: ID of the DNS record
      in: path
      schema:
        type: string
        format: uuid
      required: true
    HealthCheckName:
      name: name
      description: Name of the health-check
      in: query
      schema:
        type: string
      required: true
    HealthCheckUpstream:
      name: upstream
      description: Upstream of the health-check monitoring
      in: query
      schema:
        type: string
      required: true
    HealthCheckReportType:
      name: type
      description: Type of reports for the health check
      in: query
      schema:
        type: string
        default: "all"
        enum:
          - all
          - success
          - error
      required: false
    Search:
      name: search
      description: Search term
      in: query
      schema:
        type: string
    Direction:
      name: direction
      description: Set the direction of sorting
      in: query
      schema:
        type: string
        enum:
          - asc
          - desc
    CdnAppSortBy:
      name: sort_by
      in: query
      schema:
        type: string
        enum:
          - rank
          - likes
    PerPage:
      name: per_page
      description: Set how many items returned per page
      in: query
      schema:
        type: integer
    Page:
      name: page
      description: Set the desired page number
      in: query
      schema:
        type: integer
        default: 1
    DynamicFieldScope:
      name: scope
      in: query
      schema:
        type: string
        enum: [ private, public ]
    DynamicFieldType:
      name: type
      in: query
      schema:
        type: string
        enum: [ ip, bytes, number ]
    DynamicFieldName:
      name: name
      in: query
      schema:
        type: string
    ReportPeriod:
      name: period
      description: Select period -ending now- for report
      in: query
      schema:
        type: string
        enum: [ 1h,3h,6h,12h,24h,7d,30d ]
    ReportSince:
      name: since
      in: query
      schema:
        type: string
        format: date-time
    ReportUntil:
      name: until
      in: query
      schema:
        type: string
        format: date-time
    FilterSubdomain:
      name: 'filter[subdomain]'
      in: query
      schema:
        type: string
        pattern: '^[\w@-]+$'
        nullable: true
        description: Select subdomain for report. @ means the root domain.
    type:
      name: type
      description: Set the desired log
      in: query
      schema:
        type: string
        enum: [ cdn,waf ]
    CategoryId:
      name: category_id
      description: Filter apps by category
      in: query
      schema:
        type: string
        format: uuid
    ApplicationCategory:
      name: application-category
      description: The id of the category
      in: path
      required: true
      schema:
        type: string
    ApplicationCategories:
      name: categories
      in: query
      schema:
        nullable: true
        type: array
        items:
          type: string
    HealthCheck:
      name: healthcheck
      in: path
      schema:
        type: string
        format: uuid
      required: true
    DnsRecordType:
      name: type
      description: Type of a dns record. To filter multiple types separate them using a comma
      in: query
      schema:
        type: string
      example: a,cname,txt
  schemas:
    SavedTrafficsCharts:
      type: object
      properties:
        request:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                enum: [ reports.request.hit, reports.request.miss ]
              y:
                type: integer
        traffic:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                enum: [ reports.traffic.hit, reports.traffic.miss ]
              y:
                type: integer
    SavedTrafficsStatistics:
      type: object
      properties:
        traffic:
          type: object
          properties:
            saved:
              type: integer
            total:
              type: integer
        request:
          type: object
          properties:
            saved:
              type: integer
            total:
              type: integer
    SavedTrafficsData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          type: object
          properties:
            statistics:
              $ref: '#/components/schemas/SavedTrafficsStatistics'
            charts:
              $ref: '#/components/schemas/SavedTrafficsCharts'
    TransportLayerProxyTrafficCharts:
      type: object
      properties:
        traffics:
          type: object
          properties:
            title:
              type: string
              enum: [ reports.traffics ]
            categories:
              type: array
              items:
                type: string
                format: date-time
            series:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    enum: [ reports.traffics.bytes_out, reports.traffics.bytes_in, reports.traffics.connections ]
                  data:
                    type: array
                    items:
                      type: integer
    TrafficCharts:
      type: object
      properties:
        requests:
          type: object
          properties:
            title:
              type: string
              enum: [ reports.requests ]
            categories:
              type: array
              items:
                type: string
                format: date-time
            series:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    enum: [ reports.requests.total, reports.requests.saved ]
                  data:
                    type: array
                    items:
                      type: integer
        traffics:
          type: object
          properties:
            title:
              type: string
              enum: [ reports.traffics ]
            categories:
              type: array
              items:
                type: string
                format: date-time
            series:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    enum: [ reports.traffics.total, reports.traffics.saved ]
                  data:
                    type: array
                    items:
                      type: integer
    TrafficStatistics:
      type: object
      properties:
        traffics:
          type: object
          properties:
            saved:
              type: integer
            bypass:
              type: integer
            top:
              type: string
              format: date-time
            total:
              type: integer
          required: [ saved, top, total ]
        requests:
          type: object
          properties:
            saved:
              type: integer
            bypass:
              type: integer
            top:
              type: string
              format: date-time
            total:
              type: integer
          required: [ saved, top, total ]
    TransportLayerProxyTrafficsData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          type: object
          properties:
            charts:
              $ref: '#/components/schemas/TransportLayerProxyTrafficCharts'
    TrafficsData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/Traffics'
    CountryStatistics:
      type: object
      properties:
        country:
          type: string
          description: The name of the country
        requests:
          type: integer
          description: The number of requests from the country
        traffics:
          type: integer
          description: The amount of traffic from the country
    CountryRequestChart:
      type: object
      example:
        IRN:
          fillKey: 4
          name: Iran (Islamic Republic of)
          value: 12456789
        description: A dictionay which maps country codes to fill and value
      properties:
        fillKey:
          type: integer
          description: The fill key for the country
        name:
          type: string
          description: The name of the country
        value:
          type: integer
          description: The number of requests from the country
    CountryTrafficChart:
      type: object
      properties:
        fillKey:
          type: integer
          description: The fill key for the country
        name:
          type: string
          description: The name of the country
        value:
          type: integer
          description: The amount of traffic from the country
    CountryList:
      type: object
      properties:
        country:
          type: string
          description: The name of the country
        code:
          type: string
          description: The 2-letter country code
        requests:
          type: integer
          description: The number of requests from the country
        traffics:
          type: integer
          description: The amount of traffic from the country
    MapTrafficsData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/TrafficsMap'
    VisitorsStatistics:
      type: object
      properties:
        visitors:
          type: object
          properties:
            top_visitors:
              type: string
              format: date-time
            total_visitors:
              type: integer
          required: [ top_visitors, total_visitors ]
    VisitorsCharts:
      type: object
      properties:
        visitors:
          type: object
          properties:
            title:
              type: string
              enum: [ reports.visitor ]
            categories:
              type: array
              items:
                type: string
                format: date-time
            series:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    enum: [ reports.visitor.visitors ]
                  data:
                    type: array
                    items:
                      type: integer
    Traffics:
      type: object
      properties:
        statistics:
          $ref: '#/components/schemas/TrafficStatistics'
        charts:
          $ref: '#/components/schemas/TrafficCharts'
    TrafficsMap:
      type: object
      properties:
        statistics:
          deprecated: true
          type: array
          items:
            $ref: '#/components/schemas/CountryStatistics'
        charts:
          type: object
          properties:
            requests:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/CountryRequestChart'
            traffics:
              type: object
              additionalProperties:
                $ref: '#/components/schemas/CountryTrafficChart'
        lists:
          type: array
          items:
            $ref: '#/components/schemas/CountryList'
    Visitors:
      type: object
      properties:
        statistics:
          $ref: '#/components/schemas/VisitorsStatistics'
        charts:
          $ref: '#/components/schemas/VisitorsCharts'
    VisitorsData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/Visitors'
    HighRequestedIp:
      type: object
      properties:
        ip:
          anyOf:
            - type: string
              format: ipv4
            - type: string
              format: ipv6
        request_count:
          type: integer
    ResponseTime:
      type: object
      properties:
        statistics:
          type: object
          properties:
            response_time:
              nullable: true
        charts:
          type: object
          properties:
            ir:
              type: object
              properties:
                title:
                  type: string
                  enum: [ reports.response_time ]
                categories:
                  type: array
                  items:
                    type: string
                    format: date-time
                series:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        enum: [ reports.response_time.Server ]
                      data:
                        type: array
                        items:
                          type: number
                          format: double
    ResponseTimeData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/ResponseTime'
    StatusCodeReport:
      type: object
      properties:
        statistics:
          type: object
          properties:
            status_codes:
              type: object
              properties:
                2xx_sum:
                  type: integer
                3xx_sum:
                  type: integer
                4xx_sum:
                  type: integer
                5xx_sum:
                  type: integer
        charts:
          type: object
          properties:
            status_code:
              type: object
              properties:
                name:
                  type: string
                  enum: [ status_code ]
                categories:
                  type: array
                  items:
                    type: string
                    format: date-time
                series:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        enum:
                          - 'report.status_code.2xx'
                          - 'report.status_code.3xx'
                          - 'report.status_code.4xx'
                          - 'report.status_code.4xx'
                      data:
                        type: array
                        items:
                          type: number
                          format: double
    StatusCodeReportData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/StatusCodeReport'
    StatusCodeSummary:
      type: object
      properties:
        statistics:
          type: object
          deprecated: true
        charts:
          type: object
          properties:
            status_code:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  y:
                    type: integer
    StatusCodeSummaryData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/StatusCodeSummary'
    ErrorLog:
      type: object
      properties:
        name:
          type: string
          description: The error message
        count:
          type: integer
          description: The error's count
        upstreams:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                description: The upstream's address
              count:
                type: integer
                description: Error count per upstream
    ErrorLogsData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ErrorLog'
    ErrorLogChart:
      type: object
      properties:
        statistics:
          type: object
          properties:
            status_codes:
              type: object
              additionalProperties: true
              description: <key, value> where key is error and value is its count
        charts:
          type: object
          properties:
            status_code:
              type: object
              properties:
                title:
                  type: string
                  enum: [ reports.status_code ]
                categories:
                  type: array
                  items:
                    type: string
                    format: date-time
                series:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The error message
                      data:
                        type: array
                        items:
                          type: integer
    ErrorLogChartData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/ErrorLogChart'
    DnsRequestReport:
      type: object
      properties:
        statistics:
          type: object
          properties:
            total:
              type: integer
            top:
              type: string
              format: date-time
        charts:
          type: object
          properties:
            requests:
              type: object
              properties:
                title:
                  type: string
                  enum: [ reports.requests ]
                categories:
                  type: array
                  items:
                    type: string
                    format: date-time
                series:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        enum: [ reports.requests.request ]
                      data:
                        type: array
                        items:
                          type: integer
    DnsRequestReportData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/DnsRequestReport'
    DnsGeoReport:
      type: object
      properties:
        statistics:
          deprecated: true
          type: array
          items: { }
        charts:
          type: object
          properties:
            requests:
              type: object
              example:
                IRN:
                  fillKey: 4
                  name: Iran (Islamic Republic of)
                  value: 12456789
              description: A dictionay which maps country codes to fill and value
              additionalProperties:
                type: object
                properties:
                  fillKey:
                    type: integer
                  name:
                    type: string
                  value:
                    type: integer
        lists:
          type: array
          items:
            type: object
            properties:
              country:
                type: string
              name:
                type: string
              code:
                type: string
              requests:
                type: integer
    DnsGeoReportData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/DnsGeoReport'
    AttackReport:
      type: object
      properties:
        statistics:
          type: object
          properties:
            attacks:
              type: object
              properties:
                total:
                  type: integer
                top:
                  type: string
                  format: date-time
        charts:
          type: object
          properties:
            attacks:
              type: object
              properties:
                title:
                  type: string
                  enum: [ reports.attack ]
                categories:
                  type: array
                  items:
                    type: string
                    format: date-time
                series:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        enum: [ reports.attack.attacks ]
                      data:
                        type: array
                        items:
                          type: integer
    AttackReportItem:
      type: object
      properties:
        attacker_ip:
          type: string
          format: ipv4
        attacker_country:
          type: string
        method:
          type: string
          enum: [ GET, POST, PUT, PATCH, DELETE, HEAD, OPTION ]
        uri:
          type: string
          format: uri
        host:
          type: array
          items:
            type: string
            format: hostname
        timestamp:
          type: string
          format: date-time
        uri_args:
          type: string
        cookie:
          type: string
          items:
            type: string
        alerts:
          type: array
          items:
            type: string
        user_agent:
          type: array
          items:
            type: string
    AttackReportMap:
      type: object
      properties:
        statistics:
          deprecated: true
          type: array
          items:
            type: object
            properties:
              country:
                type: string
                description: The 2-letter country code
              name:
                type: string
                description: The name of the country
              code:
                type: string
                description: The 3-letter country code
              attack:
                type: integer
                description: The number of attacks
        charts:
          type: object
          properties:
            attacks:
              type: object
              additionalProperties:
                type: object
                properties:
                  fillKey:
                    type: integer
                    description: A numerical key used for coloring the map
                  name:
                    type: string
                    description: The name of the country
                  value:
                    type: integer
                    description: The number of attacks
        lists:
          type: array
          items:
            type: object
            properties:
              country:
                type: string
                description: The 2-letter country code
              name:
                type: string
                description: The name of the country
              code:
                type: string
                description: The 3-letter country code
              attack:
                type: integer
                description: The number of attacks
    AttackReportMapData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/AttackReportMap'
    AttackReportUri:
      type: object
      properties:
        uri:
          type: string
          format: uri
        count:
          type: integer
    AttackReportUriData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AttackReportUri'
    BulkTrafficReport:
      type: object
      properties:
        resource:
          type: string
          format: uuid
          description: Domain's ID
        success:
          type: boolean
        message:
          type: string
          nullable: true
          description: The error message
        data:
          type: object
          properties:
            requests:
              type: integer
            ingress_bytes:
              type: integer
            egress_bytes:
              type: object
              properties:
                iran:
                  type: integer
                europe_americas:
                  type: integer
                others:
                  type: integer
    BulkTrafficReportData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BulkTrafficReport'
    BulkVisitorReport:
      type: object
      properties:
        resource:
          type: string
          format: uuid
          description: Domain's ID
        success:
          type: boolean
        message:
          type: string
          nullable: true
          description: The error message
        data:
          type: object
          properties:
            visitors:
              type: integer
    BulkVisitorReportData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BulkVisitorReport'
    EmailForwardingStats:
      type: object
      properties:
        id:
          type: string
          format: uuid
        dns_activation:
          type: boolean
        recipients_count:
          type: integer
        aliases_count:
          type: integer
        is_active:
          type: boolean
        is_configured:
          type: boolean
        emails_forwarded:
          type: integer
        emails_blocked:
          type: integer
        emails_replied:
          type: integer
    EmailForwardingStatsData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/EmailForwardingStats'
    EmailForwardingRecipientsList:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
            format: email
          is_verified:
            type: boolean
          is_default:
            type: boolean
    EmailForwardingRecipientsListData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/EmailForwardingRecipientsList'
    EmailForwardingRecipientsStore:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
    EmailForwardingRecipient:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        is_verified:
          type: boolean
        is_default:
          type: boolean
    EmailForwardingRecipientsVerify:
      type: object
      required:
        - code
      properties:
        code:
          type: string
    EmailForwardingAliasesList:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            format: uuid
          local_part:
            type: string
          email:
            type: string
            format: email
          is_active:
            type: boolean
    EmailForwardingAliasesListData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: "#/components/schemas/EmailForwardingAliasesList"
    EmailForwardingAliasesStore:
      type: object
      required:
        - local_part
        - recipients
      properties:
        local_part:
          type: string
        recipients:
          type: array
          items:
            type: string
            format: uuid
    EmailForwardingAlias:
      type: object
      properties:
        id:
          type: string
          format: uuid
        local_part:
          type: string
        email:
          type: string
          format: email
        is_active:
          type: boolean
    EmailForwardingAliasesToggleActivation:
      type: object
      required:
        - is_active
      properties:
        is_active:
          type: boolean
    EmailForwardingAliasesRecipients:
      type: object
      required:
        - recipients
      properties:
        recipients:
          type: array
          items:
            type: string
            format: uuid
    DataWithMessageResponse:
      type: object
      properties:
        message:
          type: string
          nullable: true
        data:
          type: object
          nullable: true
    DataResponse:
      type: object
      properties:
        data:
          type: object
          nullable: true
    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        links:
          $ref: '#/components/schemas/PaginatedResponseLinks'
        meta:
          $ref: '#/components/schemas/PaginatedResponseMeta'
    PaginatedResponseMeta:
      type: object
      properties:
        current_page:
          type: integer
        from:
          type: integer
        last_page:
          type: integer
        path:
          type: string
          format: url
        per_page:
          type: integer
        to:
          type: integer
        total:
          type: integer
    PaginatedResponseLinks:
      type: object
      required:
        - first
        - prev
        - next
      properties:
        first:
          type: string
          format: url
        last:
          type: string
          format: url
          nullable: true
        prev:
          type: string
          nullable: true
          format: url
        next:
          type: string
          nullable: true
          format: url
    CustomCname:
      type: object
      properties:
        address:
          type: string
          format: hostname
      required:
        - address
    DomainTransferData:
      type: object
      readOnly: true
      properties:
        domain:
          type: string
          format: hostname
        account_id:
          type: string
          format: uuid
        account_name:
          type: string
        owner_name:
          type: string
        owner_id:
          type: string
          format: uuid
        time:
          type: string
          format: date-time
        incoming:
          type: boolean
    Domain:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user_id:
          type: string
          format: uuid
        domain:
          type: string
          format: hostname
          deprecated: true
          description: Deprecated in favor of name attribute
        name:
          type: string
          format: hostname
        plan_level:
          $ref: '#/components/schemas/Plan'
        ns_keys:
          description: Desired NS values for the domain
          type: array
          items:
            type: string
            format: hostname
          minItems: 2
          maxItems: 2
        current_ns:
          description: Current NS values for the domain
          type: array
          items:
            type: string
            format: hostname
          minItems: 2
          maxItems: 2
        target_cname:
          description: Current record for CNAME Setup of the domain
          type: string
          format: hostname
          nullable: true
        custom_cname:
          description: Domain's custom record for CNAME Setup
          type: string
          format: hostname
          nullable: true
        type:
          description: Partial domain is using CNAME Setup and full domain is using NS Setup
          type: string
          enum:
            - full
            - partial
        status:
          type: string
          enum:
            - initializing
            - pending
            - active
            - moved
        dns_cloud:
          type: boolean
          default: false
        restriction:
          type: array
          items:
            type: string
            enum:
              - paused
              - suspended
              - unfair
              - charged
        transfer:
          $ref: "#/components/schemas/DomainTransferData"
        fingerprint_status:
          type: boolean
          default: false
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    DomainStore:
      type: object
      required:
        - domain
      properties:
        domain:
          description: Name of the domain
          type: string
          format: hostname
        domain_type:
          description: If you want to register a subdomain, you can use cname setup by sending partial type
          default: "full"
          type: string
          enum:
            - "full"
            - "partial"
        plan_level:
          $ref: '#/components/schemas/Plan'
    DomainResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/Domain'
    TransferDomain:
      type: object
      required:
        - account_id
      properties:
        account_id:
          type: string
          format: uuid
    TransferDomainChangeStatus:
      type: object
      required:
        - domain
        - status
      properties:
        domain:
          type: "string"
          format: hostname
          example: "example.com"
        status:
          type: string
          enum: [ accept, cancel ]
        preserve_state:
          type: boolean
          default: false
    NsKeys:
      type: object
      properties:
        ns_keys:
          description: Desired NS values for the domain
          type: array
          items:
            type: string
            format: hostname
    NsKeysResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          type: object
          properties:
            ns_keys:
              description: Desired NS values for the domain
              type: array
              items:
                type: string
                format: hostname
    NsDomain:
      type: object
      properties:
        ns_domain:
          description: Current NS records of the domain
          type: array
          items:
            type: string
            format: hostname
        ns_keys:
          description: Desired NS values for the domain
          type: array
          items:
            type: string
            format: hostname
    DeprecatedNs:
      type: object
      properties:
        ns_domain:
          description: Current NS records of the domain
          type: array
          items:
            type: string
            format: hostname
        ns_keys:
          description: Desired NS values for the domain
          type: array
          items:
            type: string
            format: hostname
        ns_status:
          type: boolean
    Plan:
      type: integer
      minimum: 0
      maximum: 4
      description: |
        - `0` - Traffic
        - `1` - Basic
        - `2` - Growth
        - `3` - Professional
        - `4` - Enterprise
        - Subdomains require to have Growth plan or higher
    PlanUpdate:
      type: object
      required:
        - plan_level
      properties:
        plan_level:
          $ref: '#/components/schemas/Plan'
    A-RecordValue:
      type: object
      required:
        - ip
      properties:
        ip:
          type: string
          format: ipv4
        port:
          type: integer
          minimum: 1
          maximum: 65535
          nullable: true
        weight:
          type: integer
          minimum: 0
          maximum: 1000
          nullable: true
        original_weight:
          type: integer
          description: This key shows itself here if the weight have been changed by Health Check.
          example: 100
          readOnly: true
        country:
          type: string
          example: US
          description: ISO 3166 alpha-2 country code
          nullable: true
    A-RecordValues:
      type: array
      items:
        $ref: '#/components/schemas/A-RecordValue'
    AAAA-RecordValues:
      type: array
      items:
        $ref: '#/components/schemas/AAAA-RecordValue'
    AAAA-RecordValue:
      type: object
      required:
        - ip
      properties:
        ip:
          type: string
          format: ipv6
        port:
          type: integer
          minimum: 1
          maximum: 65535
          nullable: true
        weight:
          type: integer
          minimum: 0
          maximum: 1000
          nullable: true
        original_weight:
          type: integer
          description: This key shows itself here if the weights have been changed by Health Check.
          example: 100
          readOnly: true
        country:
          type: string
          example: US
          description: ISO 3166 alpha-2 country code
          nullable: true
    MX-RecordValue:
      type: object
      required:
        - host
        - priority
      properties:
        host:
          $ref: '#/components/schemas/HostName'
        priority:
          type: integer
          minimum: 0
          maximum: 9999
          nullable: true
    NS-RecordValue:
      required:
        - host
      type: object
      properties:
        host:
          $ref: '#/components/schemas/HostName'
    SRV-RecordValue:
      type: object
      required:
        - target
        - port
      properties:
        target:
          $ref: '#/components/schemas/HostName'
        port:
          type: integer
          minimum: 1
          maximum: 65535
          nullable: true
        weight:
          type: integer
          minimum: 0
          maximum: 1000
          nullable: true
        priority:
          type: integer
          minimum: 0
          maximum: 9999
          nullable: true
    TXT-RecordValue:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          maxLength: 500
    SPF-RecordValue:
      $ref: '#/components/schemas/TXT-RecordValue'
    DKIM-RecordValue:
      $ref: '#/components/schemas/TXT-RecordValue'
    ANAME-RecordValue:
      type: object
      required:
        - location
        - host_header
      properties:
        location:
          $ref: '#/components/schemas/Fqdn'
        host_header:
          type: string
          enum: [ source, dest ]
          nullable: true
        port:
          type: integer
          minimum: 1
          maximum: 65535
          nullable: true
    CNAME-RecordValue:
      type: object
      required:
        - host
        - host_header
      properties:
        host:
          $ref: '#/components/schemas/Fqdn'
        host_header:
          type: string
          enum: [ source, dest ]
          nullable: true
        port:
          type: integer
          minimum: 1
          maximum: 65535
          nullable: true
    PTR-RecordValue:
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/HostName'
    TLSA-RecordValue:
      type: object
      required:
        - usage
        - certificate
        - selector
        - matching_type
      properties:
        usage:
          type: string
          minLength: 0
          maxLength: 255
        selector:
          type: string
          minLength: 0
          maxLength: 255
        matching_type:
          type: string
          minLength: 0
          maxLength: 255
        certificate:
          type: string
          example: 1SKJND4KSID7OS9KJ21LSJ
    CAA-RecordValue:
      type: object
      required:
        - value
        - tag
      properties:
        value:
          type: string
          description: Should be a valid domain
          example: example.com
        tag:
          type: string
          enum:
            - issuewild
            - issue
            - iodef
    Fqdn:
      type: string
      format: hostname
      description: A fully-qualified domain name (FQDN)
      example: cdn.example.com
    HostName:
      type: string
      format: hostname
      pattern: '^([a-zA-Z0-9._-])+$'
      maxLength: 500
      example: cdn.example.com
    DnsRecord:
      oneOf:
        - $ref: '#/components/schemas/A-Record'
        - $ref: '#/components/schemas/AAAA-Record'
        - $ref: '#/components/schemas/NS-Record'
        - $ref: '#/components/schemas/TXT-Record'
        - $ref: '#/components/schemas/CNAME-Record'
        - $ref: '#/components/schemas/ANAME-Record'
        - $ref: '#/components/schemas/MX-Record'
        - $ref: '#/components/schemas/SRV-Record'
        - $ref: '#/components/schemas/SPF-Record'
        - $ref: '#/components/schemas/DKIM-Record'
        - $ref: '#/components/schemas/PTR-Record'
        - $ref: '#/components/schemas/TLSA-Record'
        - $ref: '#/components/schemas/CAA-Record'
    DnsRecordGeneric:
      anyOf:
        - $ref: '#/components/schemas/DnsRecordGenericArrayValue'
        - $ref: '#/components/schemas/DnsRecordGenericObjectValue'
    DnsRecordGenericObjectValue:
      allOf:
        - $ref: '#/components/schemas/BaseDnsRecord'
      properties:
        value:
          type: object
          example:
            {
              "text": "example",
            }
        type:
          type: string
          example: cname
    DnsRecordGenericArrayValue:
      allOf:
        - $ref: '#/components/schemas/BaseDnsRecord'
      properties:
        value:
          type: array
          items: { }
          example: [
            {
              "ip": "198.51.100.42",
              "port": 65535,
              "weight": 1000,
              "country": "US"
            }
          ]
        type:
          type: string
          example: a
    CAA-Record:
      allOf:
        - $ref: '#/components/schemas/BaseDnsRecord'
      properties:
        value:
          $ref: '#/components/schemas/CAA-RecordValue'
        type:
          type: string
          default: "caa"
          enum:
            - caa
    TLSA-Record:
      allOf:
        - $ref: '#/components/schemas/BaseDnsRecord'
      properties:
        value:
          $ref: '#/components/schemas/TLSA-RecordValue'
        type:
          type: string
          default: "tlsa"
          enum:
            - tlsa
    PTR-Record:
      allOf:
        - $ref: '#/components/schemas/BaseDnsRecord'
      properties:
        value:
          $ref: '#/components/schemas/PTR-RecordValue'
        type:
          type: string
          default: "ptr"
          enum:
            - ptr
    DKIM-Record:
      allOf:
        - $ref: '#/components/schemas/BaseDnsRecord'
      properties:
        value:
          $ref: '#/components/schemas/DKIM-RecordValue'
        type:
          type: string
          default: "dkim"
          enum:
            - dkim
    SPF-Record:
      allOf:
        - $ref: '#/components/schemas/BaseDnsRecord'
      properties:
        value:
          $ref: '#/components/schemas/SPF-RecordValue'
        type:
          type: string
          default: "spf"
          enum:
            - spf
    SRV-Record:
      allOf:
        - $ref: '#/components/schemas/BaseDnsRecord'
      properties:
        value:
          $ref: '#/components/schemas/SRV-RecordValue'
        type:
          type: string
          default: "srv"
          enum:
            - srv
    TXT-Record:
      allOf:
        - $ref: '#/components/schemas/BaseDnsRecord'
      properties:
        value:
          $ref: '#/components/schemas/TXT-RecordValue'
        type:
          type: string
          default: "txt"
          enum:
            - txt
    MX-Record:
      allOf:
        - $ref: '#/components/schemas/BaseDnsRecord'
      properties:
        value:
          $ref: '#/components/schemas/MX-RecordValue'
        type:
          type: string
          default: "mx"
          enum:
            - mx
    ANAME-Record:
      allOf:
        - $ref: '#/components/schemas/BaseDnsRecord'
      properties:
        value:
          $ref: '#/components/schemas/ANAME-RecordValue'
        type:
          type: string
          default: "aname"
          enum:
            - aname
    CNAME-Record:
      allOf:
        - $ref: '#/components/schemas/BaseDnsRecord'
      properties:
        value:
          $ref: '#/components/schemas/CNAME-RecordValue'
        type:
          type: string
          default: "cname"
          enum:
            - cname
    NS-Record:
      allOf:
        - $ref: '#/components/schemas/BaseDnsRecord'
      properties:
        value:
          $ref: '#/components/schemas/NS-RecordValue'
        type:
          type: string
          default: "ns"
          enum:
            - ns
    A-Record:
      allOf:
        - $ref: '#/components/schemas/BaseDnsRecord'
      properties:
        value:
          $ref: '#/components/schemas/A-RecordValues'
        type:
          type: string
          default: "a"
          enum:
            - a
    AAAA-Record:
      allOf:
        - $ref: '#/components/schemas/BaseDnsRecord'
      properties:
        value:
          $ref: '#/components/schemas/AAAA-RecordValues'
        type:
          type: string
          default: "aaaa"
          enum:
            - aaaa
    BaseDnsRecord:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 250
        ttl:
          type: integer
          enum: [ 120,180,300,600,900,1800,3600,7200,18000,43200,86400,172800,432000 ]
        cloud:
          type: boolean
          default: false
        upstream_https:
          type: string
          enum:
            - default
            - auto
            - http
            - https
        ip_filter_mode:
          $ref: '#/components/schemas/DnsRecordIpFilterMode'
        is_protected:
          type: boolean
          description: Protected records cannot be modified or deleted by user.
          default: false
          readOnly: true
        usage:
          type: array
          default: [ ]
          readOnly: true
          items:
            type: string
            enum:
              - transport-layer-proxy
              - certificate-issuance
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    DnsRecordIpFilterMode:
      type: object
      properties:
        count:
          type: string
          enum:
            - single
            - multi
        order:
          type: string
          enum:
            - none
            - weighted
            - rr
        geo_filter:
          type: string
          enum:
            - none
            - location
            - country
    DnsRecordResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/DnsRecordGeneric'
    DnsRecordData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/DnsRecordGeneric'
    DnsRecordCloud:
      type: object
      properties:
        cloud:
          type: boolean
      required: [ cloud ]
    DnsRecordImport:
      type: object
      properties:
        f_zone_file:
          type: string
          format: binary
    DnsSec:
      type: object
      properties:
        enabled:
          type: boolean
          default: false
        ds:
          type: string
          nullable: true
    DnsSecData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/DnsSec'
    DnsSecStatus:
      type: object
      properties:
        enable:
          type: boolean
      required: [ enable ]
    PageRuleSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        domain_id:
          type: string
          format: uuid
        seq:
          type: integer
          minimum: 0
          description: Order of the page-rule
        url_type:
          deprecated: true
          description: This flag is deprecated in favor of is_protected flag
          type: string
          enum: [ default, index, directory, extension, page, regex ]
          default: "default"
        is_protected:
          type: boolean
          description: Protected records cannot be modified or deleted by user.
          default: false
          readOnly: true
        url:
          type: string
          description: URL pattern of target pages
        cache_level:
          type: string
          enum: [ off, uri, query_string ]
          default: "query_string"
        waf_status:
          type: boolean
          default: true
        fw_status:
          type: boolean
          default: true
          description: Shows whether firewall is enabled or not
          deprecated: true
        acceleration:
          $ref: '#/components/schemas/Acceleration'
        slink_status:
          type: boolean
          default: false
          description: Secure link is enabled or not
        status:
          type: boolean
          default: true
          description: Is the page-rule enabled?
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PageRule:
      allOf:
        - $ref: '#/components/schemas/PageRuleSummary'
      properties:
        cache_200:
          type: string
          enum: [ 0s,1s,2s,3s,4s,5s,6s,7s,8s,9s,10s,30s,1m,3m,5m,10m,30m,45m,1h,3h,5h,10h,12h,24h,3d,7d,10d,15d,30d ]
          default: "30m"
        cache_any:
          type: string
          enum: [ 0s,1s,2s,3s,4s,5s,6s,7s,8s,9s,10s,30s,1m,3m,5m,10m,30m,45m,1h,3h,5h,10h,12h,24h,3d,7d,10d,15d,30d ]
          default: "0s"
        cache_cookie:
          type: string
          description: Cookie variables to consider in cache (comma separaterd values)
          default: ''
        cache_device_type:
          type: boolean
          default: false
        cache_args:
          type: boolean
          default: true
        cache_arg:
          type: string
          description: Query string arguments to consider in cache (& seperated values)
          example: 'filter&sort'
          default: ''
        cache_scheme:
          deprecated: true
          type: boolean
          default: true
        cache_browser:
          type: string
          enum: [ default,0s,1s,2s,3s,4s,5s,6s,7s,8s,9s,10s,30s,1m,3m,5m,10m,30m,45m,1h,3h,5h,10h,12h,24h,3d,7d,10d,15d,30d ]
          default: "default"
        cache_ignore_sc:
          type: boolean
          default: false
          description: Ignore default behavior in caching set-cookie header
        cache_ignore_vary:
          type: boolean
          default: true
          description: Ignore default behavior in caching vary header
        cache_ignore_cc:
          type: boolean
          default: true
        cors_header:
          type: string
          default: '-'
        rewrite_url:
          type: string
          default: '-'
        slink_secret:
          type: string
          default: ''
        slink_md5:
          type: array
          nullable: true
          items:
            type: string
            enum: [ remote_addr, file, expires, url, uri ]
          default: [ "remote_addr", "file", "expires" ]
        load_balancer:
          type: string
          nullable: true
          default: null
          description: Name or ID of the load balancer
        cluster_status:
          deprecated: true
          type: boolean
          default: false
        image_resize:
          $ref: '#/components/schemas/PageRuleImageResize'
        cluster_id:
          deprecated: true
          type: string
          format: uuid
          nullable: true
          default: null
        upstream_timeout:
          $ref: '#/components/schemas/UpstreamTimeout'
        req_custom_headers:
          type: array
          default: [ ]
          items:
            type: object
            properties:
              name:
                type: string
              value:
                type: string
        res_custom_headers:
          type: array
          default: [ ]
          items:
            type: object
            properties:
              name:
                type: string
              value:
                type: string
        req_hide_headers:
          type: array
          default: [ ]
          items:
            type: string
            pattern: '[\w-]+'
        res_hide_headers:
          type: array
          default: [ ]
          items:
            type: string
        custom_host_header:
          type: string
          format: hostname
          default: ''
        redirect:
          $ref: '#/components/schemas/PageRuleRedirect'
    UpstreamTimeout:
      type: object
      properties:
        connect_timeout:
          type: integer
          default: 30
          description: Seconds to timeout
        read_timeout:
          type: integer
          default: 100
          description: Seconds to timeout
        send_timeout:
          type: integer
          default: 300
          description: Seconds to timeout
    PageRuleRedirect:
      type: object
      properties:
        enable:
          type: boolean
          default: false
        status_code:
          type: integer
          enum: [ 301,302,307 ]
          default: 301
        url:
          type: string
          format: url
          nullable: true
    PageRuleResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/PageRule'
    PageRuleData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/PageRule'
    PageRuleDiff:
      type: object
      properties:
        url:
          type: string
          description: URL pattern of target pages
        cache_level:
          type: string
          enum: [ "off", "uri", "query_string" ]
        waf_status:
          type: boolean
        fw_status:
          type: boolean
          description: Shows whether firewall is enabled or not
          deprecated: true
        acceleration:
          $ref: '#/components/schemas/Acceleration'
        slink_status:
          type: boolean
          description: Secure link is enabled or not
        status:
          type: boolean
          description: Is the page-rule enabled?
        cache_200:
          type: string
          enum: [ 0s,1s,2s,3s,4s,5s,6s,7s,8s,9s,10s,30s,1m,3m,5m,10m,30m,45m,1h,3h,5h,10h,12h,24h,3d,7d,10d,15d,30d ]
        cache_any:
          type: string
          enum: [ 0s,1s,2s,3s,4s,5s,6s,7s,8s,9s,10s,30s,1m,3m,5m,10m,30m,45m,1h,3h,5h,10h,12h,24h,3d,7d,10d,15d,30d ]
        cache_cookie:
          type: string
          description: Cookie variables to consider in cache (comma separaterd values)
        cache_args:
          type: boolean
        cache_arg:
          type: string
          description: Query string arguments to consider in cache (& seperated values)
          example: 'filter&sort'
          default: ''
        cache_scheme:
          deprecated: true
          type: boolean
        cache_browser:
          type: string
          enum: [ default,0s,1s,2s,3s,4s,5s,6s,7s,8s,9s,10s,30s,1m,3m,5m,10m,30m,45m,1h,3h,5h,10h,12h,24h,3d,7d,10d,15d,30d ]
        cache_ignore_sc:
          type: boolean
          description: Ignore default behavior in caching set-cookie header
        cache_ignore_vary:
          type: boolean
          description: Ignore default behavior in caching vary header
        cache_ignore_cc:
          type: boolean
        cors_header:
          type: string
        rewrite_url:
          type: string
        slink_secret:
          type: string
        slink_md5:
          type: array
          nullable: true
          items:
            type: string
            enum: [ remote_addr, file, expires, url, uri ]
        cluster_status:
          type: boolean
        cluster_id:
          type: string
          format: uuid
          nullable: true
        upstream_timeout:
          $ref: '#/components/schemas/UpstreamTimeout'
        req_custom_headers:
          type: array
          default: [ ]
          items:
            type: object
            properties:
              name:
                type: string
              value:
                type: string
              is_var:
                type: boolean
        res_custom_headers:
          type: array
          default: [ ]
          items:
            type: object
            properties:
              name:
                type: string
              value:
                type: string
              is_var:
                type: boolean
        req_hide_headers:
          type: array
          default: [ ]
          items:
            type: string
            pattern: '[\w-]+'
        res_hide_headers:
          type: array
          items:
            type: string
        custom_host_header:
          type: string
          format: hostname
        redirect:
          type: object
          properties:
            enable:
              type: boolean
            status_code:
              type: integer
              enum: [ 301,302,307 ]
            url:
              type: string
              format: url
              nullable: true
    PageRuleDiffData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/PageRuleDiff'
    LoadBalancerRegion:
      type: object
      properties:
        id:
          type: string
          format: uuid
        region:
          type: string
          example: LAH
        name:
          type: string
          readOnly: true
    LoadBalancerSetting:
      type: object
      properties:
        method:
          type: string
          enum: [ cluster_rr, cluster_chash ]
        next_upstream_tcp:
          type: string
          enum: [ "on", "off" ]
          default: "off"
          description: Try another server when the first one failed if on
        next_upstream_tcp_codes:
          $ref: '#/components/schemas/NextUpstreamTcpCodes'
        protocol:
          type: string
          enum: [ auto, http, https ]
        keepalive:
          type: string
          enum: [ "on", "off" ]
          default: "off"
        max_fails:
          type: number
          minimum: 0
          maximum: 10000
          default: 0
          description: Zero will disable failing strategy.
        fail_timeout:
          type: string
          default: "10s"
          description: Human friendly time duration.
          example: "45s"
    NextUpstreamTcpCodes:
      type: object
      description: Status codes from the upstream that trigger a switch to the next upstream
      properties:
        head:
          $ref: "#/components/schemas/NextUpstreamCodes"
        get:
          $ref: "#/components/schemas/NextUpstreamCodes"
        post:
          $ref: "#/components/schemas/NextUpstreamCodes"
        put:
          $ref: "#/components/schemas/NextUpstreamCodes"
        delete:
          $ref: "#/components/schemas/NextUpstreamCodes"
        options:
          $ref: "#/components/schemas/NextUpstreamCodes"
        patch:
          $ref: "#/components/schemas/NextUpstreamCodes"
    NextUpstreamCodes:
      type: array
      items:
        enum: [ 500, 502, 503, 504, 403, 404, 429 ]

    LoadBalancerSettingsData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/LoadBalancerSetting'
    LoadBalancer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          pattern: '^[A-Za-z0-9-]+$'
          example: "lb1"
        description:
          type: string
        status:
          type: boolean
        method:
          type: string
          enum: [ failover, cluster_rr, cluster_chash ]
        time_slice:
          type: string
          default: "0s"
          description: Human friendly time duration for which a pool will uninterruptedly be selected in cluster_rr strategy, i.e. pools will switch once every time slice.
        pools:
          type: array
          items:
            $ref: '#/components/schemas/LoadBalancerPool'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    LoadBalancerResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/LoadBalancer'
    LoadBalancerData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/LoadBalancer'
    LoadBalancerPool:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        description:
          type: string
        status:
          type: boolean
        priority:
          type: integer
          description: Zero means the default pool
        method:
          type: string
          enum: [ cluster_rr, cluster_chash ]
        keepalive:
          type: string
          enum: [ "on", "off" ]
          default: "off"
        next_upstream_tcp:
          type: string
          enum: [ "on", "off" ]
          default: "off"
          description: Try another server when the first one failed if on
        next_upstream_tcp_codes:
          $ref: '#/components/schemas/NextUpstreamTcpCodes'
        regions:
          type: array
          items:
            $ref: '#/components/schemas/LoadBalancerRegion'
        origins:
          type: array
          items:
            $ref: '#/components/schemas/LoadBalancerOrigin'
          readOnly: true
        monitoring_status:
          readOnly: true
          $ref: '#/components/schemas/MonitoringStatus'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    LoadBalancerPoolData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/LoadBalancerPool'
    LoadBalancerPoolResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/LoadBalancerPool'
    LoadBalancerOrigin:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        health_check_status:
          type: string
          readOnly: true
          enum:
            - "off"
            - "healthy"
            - "unhealthy"
            - "no-data"
        status:
          type: boolean
        address:
          type: string
        port:
          type: integer
          minimum: -1
          maximum: 65535
        weight:
          type: integer
          minimum: 1
          maximum: 1000
        protocol:
          type: string
          enum: [ auto, http, https ]
          default: "auto"
        host_header:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    LoadBalancerOriginData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/LoadBalancerOrigin'
    LoadBalancerOriginResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/LoadBalancerOrigin'
    LoadBalancerStore:
      type: object
      properties:
        name:
          type: string
          pattern: '^[A-Za-z0-9-]+$'
          example: "lb1"
        description:
          type: string
        status:
          type: boolean
        time_slice:
          type: string
          default: "0s"
          description: Human friendly time duration for which a pool will uninterruptedly be selected in cluster_rr strategy, i.e. pools will switch once every time slice.
        method:
          type: string
          enum: [ failover, cluster_rr, cluster_chash ]
        pools:
          type: array
          items:
            $ref: "#/components/schemas/LoadBalancerPoolStore"
      required: [ name, method, status ]
    LoadBalancerPoolStore:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: boolean
        priority:
          type: integer
          description: Zero means the default pool
        method:
          type: string
          enum: [ cluster_rr, cluster_chash ]
        keepalive:
          type: string
          enum: [ "on", "off" ]
          default: "off"
        next_upstream_tcp:
          type: string
          enum: [ "on", "off" ]
          default: "off"
          description: Try another server when the first one failed if on
        next_upstream_tcp_codes:
          $ref: '#/components/schemas/NextUpstreamTcpCodes'
        regions:
          type: array
          items:
            type: string
            pattern: '^[A-Z]{3}$'
        origins:
          readOnly: false
          type: array
          items:
            $ref: '#/components/schemas/LoadBalancerOriginStore'
      required: [ name, method, status, next_upstream_tcp, keepalive ]
    LoadBalancerOriginStore:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          type: boolean
        address:
          type: string
        port:
          type: integer
          minimum: 1
          maximum: 65535
        weight:
          type: integer
          minimum: 1
          maximum: 1000
        protocol:
          type: string
          enum: [ auto, http, https ]
          default: "auto"
        host_header:
          type: string
      required: [ status, protocol, address, port, weight ]
    CacheSettings:
      type: object
      properties:
        cache_developer_mode:
          type: boolean
        cache_consistent_uptime:
          type: boolean
        cache_status:
          type: string
          enum: [ off, uri, query_string ]
        cache_page_200:
          type: string
          enum: [ 0s,1s,2s,3s,4s,5s,6s,7s,8s,9s,10s,30s,1m,3m,5m,10m,30m,45m,1h,3h,5h,10h,12h,24h,3d,7d,10d,15d,30d ]
        cache_page_any:
          type: string
          enum: [ 0s,1s,2s,3s,4s,5s,6s,7s,8s,9s,10s,30s,1m,3m,5m,10m,30m,45m,1h,3h,5h,10h,12h,24h,3d,7d,10d,15d,30d ]
        cache_browser:
          type: string
          enum: [ default,0s,1s,2s,3s,4s,5s,6s,7s,8s,9s,10s,30s,1m,3m,5m,10m,30m,45m,1h,3h,5h,10h,12h,24h,3d,7d,10d,15d,30d ]
        cache_scheme:
          deprecated: true
          type: boolean
          description: To consider scheme (HTTP/HTTPs) in cache
        cache_ignore_sc:
          type: boolean
          description: Ignore default behavior in caching set-cookie header
        cache_cookie:
          type: string
          description: Cookie variables to consider in cache (comma separaterd values)
        cache_args:
          type: boolean
          description: To consider query args or not
        cache_arg:
          type: string
          description: Query string arguments to consider in cache (& seperated values)
          example: 'filter&sort'
          default: ''
    CacheSettingsData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/CacheSettings'
    ImageResize:
      type: object
      properties:
        status:
          type: string
          enum: [ 'on', 'off' ]
          default: "off"
        height_by:
          type: string
          default: "height"
        width_by:
          type: string
          default: "width"
    ImageResizeResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/ImageResize'
    PageRuleImageResize:
      allOf:
        - $ref: '#/components/schemas/ImageResize'
      properties:
        status:
          enum: [ 'on', 'off', 'inherit' ]
    Acceleration:
      type: object
      properties:
        status:
          type: string
          enum: [ "inherit", "on", "off" ]
        extensions:
          type: array
          example: [ "css" , "js" ]
          minItems: 0
          default: [ ]
          uniqueItems: true
          items:
            type: string
            enum: [ "css", "gif", "jpeg", "js", "png" ]
    AccelerationResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/Acceleration'
    AccelerationUpdate:
      allOf:
        - $ref: '#/components/schemas/Acceleration'
      properties:
        status:
          type: string
          enum: [ "on" , "off" ]
    CustomPage:
      type: object
      properties:
        status_code:
          type: integer
          enum: [ 200, 302, 481, 403, 482, 483, 484, 500 ]
        type:
          type: string
          enum: [ off, url, file ]
        url:
          type: string
          format: url
    CustomPages:
      type: object
      properties:
        under_construction:
          $ref: '#/components/schemas/CustomPage'
        firewall_error:
          $ref: '#/components/schemas/CustomPage'
        waf_protection:
          $ref: '#/components/schemas/CustomPage'
        rate_limit_exceeded:
          $ref: '#/components/schemas/CustomPage'
        secure_link_expired:
          $ref: '#/components/schemas/CustomPage'
        secure_link_invalid:
          $ref: '#/components/schemas/CustomPage'
        error_500:
          $ref: '#/components/schemas/CustomPage'
        ddos_js:
          $ref: '#/components/schemas/CustomPage'
        ddos_captcha:
          $ref: '#/components/schemas/CustomPage'
    CustomPagesData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/CustomPages'
    CustomPageUpdate:
      type: object
      properties:
        type:
          type: string
          enum: [ off, url, file ]
        page:
          type: string
          enum:
            - under_construction
            - firewall_error
            - waf_protection
            - rate_limit_exceeded
            - secure_link_expired
            - secure_link_invalid
            - error_500
            - ddos_js
            - ddos_captcha
          description: ddos_js and ddos_captcha can only be used with file type
        url:
          type: string
          format: url
        file:
          type: string
          format: binary
    Redirect:
      type: object
      properties:
        f_redirect_to_www:
          type: string
          enum: [ off,www,root ]
    RedirectData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/Redirect'
    UpdateBooleanStatus:
      type: object
      properties:
        status:
          type: boolean
    LogForwarder:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [ access, waf, dns, error, event ]
        connection_type:
          type: string
          enum:
            [
              arvan_s3,
              alibaba_s3,
              amazon_s3,
              custom_s3,
              loggly,
              datadog,
              syslog,
              kafka,
            ]
        data_format:
          $ref: '#/components/schemas/LogForwarderDataFormat'
        settings:
          $ref: '#/components/schemas/LogForwarderSetting'
        status:
          type: boolean
      required:
        - name
        - description
        - type
        - connection_type
        - data_format
        - settings
        - status
    LogForwarderGeneric:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [ access, waf, dns, error ]
        connection_type:
          type: string
          enum:
            [
              arvan_s3,
              alibaba_s3,
              amazon_s3,
              custom_s3,
              loggly,
              datadog,
              syslog,
              kafka,
            ]
        data_format:
          type: object
        settings:
          type: object
        status:
          type: boolean
    LogForwarderResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/LogForwarderGeneric'
    LogForwarderDataFormat:
      oneOf:
        - $ref: '#/components/schemas/LogForwarderAccessLogType'
        - $ref: '#/components/schemas/LogForwarderWAFType'
        - $ref: '#/components/schemas/LogForwarderDNSType'
        - $ref: '#/components/schemas/LogForwarderErrorType'
        - $ref: '#/components/schemas/LogForwarderEventType'
    LogForwarderAccessLogType:
      type: object
      description: Access log type
      properties:
        method:
          type: boolean
        scheme:
          type: boolean
        domain:
          type: boolean
        uri:
          type: boolean
        query_string:
          type: boolean
        referer:
          type: boolean
        ip:
          type: boolean
        ua:
          type: boolean
        country:
          type: boolean
        asn:
          type: boolean
        content_type:
          type: boolean
        status:
          type: boolean
        tls_fingerprint:
          type: boolean
        server_port:
          type: boolean
        bytes_sent:
          type: boolean
        bytes_received:
          type: boolean
        upstream_time:
          type: boolean
        cache:
          type: boolean
        request_id:
          type: boolean
        timestamp:
          type: boolean
    LogForwarderWAFType:
      type: object
      description: Waf log type
      properties:
        product:
          type: boolean
        timestamp:
          type: boolean
        remote_address:
          type: boolean
        domain:
          type: boolean
        data:
          type: boolean
    LogForwarderDNSType:
      type: object
      description: Dns log type
      properties:
        timestamp:
          type: boolean
        uuid:
          type: boolean
        record:
          type: boolean
        type:
          type: boolean
        ip:
          type: boolean
        country:
          type: boolean
        asn:
          type: boolean
        response_code:
          type: boolean
        process_time:
          type: boolean
    LogForwarderEventType:
      type: object
      description: Event log type
      properties:
        domain:
          type: boolean
        uuid:
          type: boolean
        timestamp:
          type: boolean
        method:
          type: boolean
        scheme:
          type: boolean
        ip:
          type: boolean
        country:
          type: boolean
        status:
          type: boolean
        server_ip:
          type: boolean
        server_port:
          type: boolean
        uri:
          type: boolean
        query_string:
          type: boolean
        firewall:
          type: boolean
        proxy:
          type: boolean
        dns_resolver:
          type: boolean
        ddos:
          type: boolean
        ratelimit:
          type: boolean
        waf:
          type: boolean
    LogForwarderErrorType:
      type: object
      description: Error log type
      properties:
        client_ip:
          type: boolean
        upstream_proto:
          type: boolean
        upstream_uri:
          type: boolean
        upstream_port:
          type: boolean
        upstream_ip:
          type: boolean
        domain_name:
          type: boolean
        http_version:
          type: boolean
        request_method:
          type: boolean
        request_uri:
          type: boolean
        real_timestamp:
          type: boolean
        error_message:
          type: boolean
        pop_site:
          type: boolean
        request_id:
          type: boolean
    LogForwarderSetting:
      oneOf:
        - $ref: '#/components/schemas/LogForwarderS3ConnectionType'
        - $ref: '#/components/schemas/LogForwarderDatadogConnectionType'
        - $ref: '#/components/schemas/LogForwarderKafkaConnectionType'
        - $ref: '#/components/schemas/LogForwarderLogglyConnectionType'
        - $ref: '#/components/schemas/LogForwarderSyslogConnectionType'
    LogForwarderS3ConnectionType:
      type: object
      description: ArvanS3, AmazonS3, AlibabaS3 and Custom S3 connections
      properties:
        sample_rate:
          type: integer
        s3_endpoint:
          type: string
          format: hostname
        access_key:
          type: string
        secret_key:
          type: string
        bucket_name:
          type: string
        object_size:
          type: integer
        flush_interval:
          type: integer
    LogForwarderDatadogConnectionType:
      type: object
      description: Datadog connection
      properties:
        sample_rate:
          type: integer
        url:
          type: string
          format: url
        api_key:
          type: string
        app_key:
          type: string
        flush_interval:
          type: integer
        buffer_size:
          type: integer
    LogForwarderKafkaConnectionType:
      type: object
      description: Kafka connection
      properties:
        sample_rate:
          type: integer
        kafka_version:
          type: string
        kafka_brokers:
          type: array
          items:
            type: string
            description: Host and port of the broker separated by a colon
            example: example.com:9092
        kafka_topic_to_write:
          type: string
        kafka_producer_batch_size:
          type: integer
        kafka_producer_flush_frequency_ms:
          type: integer
    LogForwarderLogglyConnectionType:
      type: object
      description: Loggly connection
      properties:
        sample_rate:
          type: integer
        token:
          type: string
        url:
          type: string
          format: url
        flush_interval:
          type: integer
        buffer_size:
          type: integer
    LogForwarderSyslogConnectionType:
      type: object
      description: Syslog connection
      properties:
        sample_rate:
          type: integer
        logtype:
          type: string
          enum: [ syslogudp, syslogtcp ]
        host:
          type: string
          format: hostname, ip
        port:
          type: integer
        tls:
          type: boolean
        cert:
          type: string
        retry_time:
          type: integer
    Troubleshoot:
      type: object
      properties:
        id:
          type: string
          format: uuid
        details:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                enum:
                  - root_dns_record
                  - www_dns_record
                  - mx_dns_record
                  - https_redirection
                  - domain_active_status
                  - active_certificate
                  - cloud_icon
                  - domain_expiration_days
                  - origin_ssl_port
              status:
                type: string
                enum:
                  - safe
                  - troubled
              details:
                type: string
        created_at:
          type: string
    FirewallSettings:
      allOf:
        - $ref: '#/components/schemas/BaseFirewallSettings'
      properties:
        default_action_details:
          $ref: '#/components/schemas/FirewallActionDetails'
    FirewallSettingsView:
      allOf:
        - $ref: '#/components/schemas/BaseFirewallSettings'
      properties:
        default_action_details:
          nullable: true
          type: object
    BaseFirewallSettings:
      type: object
      properties:
        is_enabled:
          type: boolean
          readOnly: true
          nullable: false
        default_action:
          type: string
          enum: [ allow, deny, drop, bypass, challenge ]
        verify_sni:
          type: boolean
          default: false
          nullable: false
          description: True to verify that SNI and hostname are equal
        skip_global_whitelist:
          type: boolean
          default: false
          nullable: true
          description: Shows hether global whitelist should be skipped for the domain or not
        skip_global_firewall:
          type: boolean
          default: false
          nullable: true
          description: Shows whether global firewall should be skipped for the domain or not
    FirewallActionDetails:
      description: Details of bypass or challenge actions
      nullable: true
      oneOf:
        - $ref: '#/components/schemas/BypassAction'
        - $ref: '#/components/schemas/ChallengeAction'
    FirewallRule:
      allOf:
        - $ref: '#/components/schemas/BaseFirewallRule'
      properties:
        action_details:
          $ref: '#/components/schemas/FirewallActionDetails'
      required:
        - name
        - filter_expr
        - action
    FirewallRuleView:
      allOf:
        - $ref: '#/components/schemas/BaseFirewallRule'
      properties:
        action_details:
          type: object
    BaseFirewallRule:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        filter_expr:
          type: string
          description: Wireshark-like filter expression
          minLength: 3
          maxLength: 5000
          example: ip.geoip.country in {"IR" "TH" "US"} and ssl
        action:
          type: string
          enum: [ allow, deny, bypass, challenge ]
        is_enabled:
          type: boolean
        note:
          type: string
    FirewallRuleResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/FirewallRuleView'
    WafPreset:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        packages:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              provider:
                type: object
                properties:
                  name:
                    type: string
                  logo:
                    type: string
                    format: url
    WafPresets:
      type: object
      properties:
        presets:
          type: array
          items:
            $ref: '#/components/schemas/WafPreset'
        packages:
          type: array
          items:
            $ref: '#/components/schemas/WafPackage'
    WafPresetsData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/WafPresets'
    WafSettings:
      type: object
      properties:
        is_enabled:
          type: boolean
          readOnly: true
        mode:
          type: string
          enum: [ off, detect, protect ]
        packages:
          description: Pacakges and their configurations that are used to configure WAF.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/DomainWafPackage'
    WafRule:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        url_pattern:
          $ref: '#/components/schemas/GlobPattern'
        sources:
          type: array
          maxItems: 20
          items:
            $ref: '#/components/schemas/CIDR'
        action:
          type: string
          enum: [ protect, passthrough ]
        description:
          type: string
        is_enabled:
          type: boolean
    WafPackage:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        provider:
          type: object
          readOnly: true
          properties:
            name:
              type: string
            logo:
              type: string
              format: url
        params_schema:
          type: object
          description: JSON-schema of parameters of the package
        disabled_rules:
          description: It will be filled by default disabled rules when it's not provided
          type: array
          items:
            type: string
            format: uuid
        disabled_rulesets:
          description: It will be filled by default disabled rulesets when it's not provided
          type: array
          items:
            type: string
            format: uuid
    WafRuleset:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        rules:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              params:
                type: object
                example:
                  score: 8
                  severity: 7
    WafRulesets:
      type: object
      properties:
        rulesets:
          type: array
          items:
            $ref: '#/components/schemas/WafRuleset'
    WafPackageDetails:
      allOf:
        - $ref: '#/components/schemas/WafPackage'
        - $ref: '#/components/schemas/WafRulesets'
    WafPackageDetailsData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/WafPackageDetails'
    DomainWafPackage:
      allOf:
        - $ref: '#/components/schemas/WafPackage'
      properties:
        params:
          type: object
          description: parameters of the package
        is_enabled:
          type: boolean
          default: true
    DomainWafPackageStore:
      type: object
      properties:
        id:
          type: string
      required: [ id ]
    DomainWafPackageDetails:
      allOf:
        - $ref: '#/components/schemas/DomainWafPackage'
        - $ref: '#/components/schemas/WafRulesets'
    DomainWafPackageDetailsData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/DomainWafPackageDetails'
    WafSettingsData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/WafSettings'
    WafReconfigure:
      type: object
      properties:
        preset_id:
          type: string
          format: uuid
    WafReprioritize:
      type: object
      properties:
        package_id:
          type: string
          format: uuid
          description: ID of the package you want to move
        after_package_id:
          type: string
          format: uuid
          description: ID of the package you want to be prior to the selected package
        before_package_id:
          type: string
          format: uuid
          description: ID of the package you want to follow the selected package
      required: [ package_id ]
    WafRuleResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/WafRule'
    DomainWafPackagesData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DomainWafPackage'
    DdosSettings:
      type: object
      properties:
        is_enabled:
          type: boolean
          readOnly: true
        protection_mode:
          type: string
          enum: [ off, cookie, javascript, captcha ]
        captcha_service:
          type: string
          enum: [ recaptcha, arcaptcha, hcaptcha ]
        site_key:
          type: string
          description: it can be configured when the captcha_service is set to arcaptcha
        secret_key:
          type: string
          description: it can be configured when the captcha_service is set to arcaptcha
        ttl:
          description: Time in seconds for cookie max-age
          type: integer
        https_only:
          description: Adds "SameSite=None; Secure" to set-cookie header
          type: boolean
        preflight:
          $ref: '#/components/schemas/DdosPreflight'
    DdosSettingsData:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/DdosSettings'
    DdosPreflight:
      type: object
      properties:
        access_origin:
          type: string
        access_credentials:
          type: string
        access_methods:
          type: array
          items:
            type: string
            enum: [ GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH ]
        access_headers:
          type: string
        access_expose_headers:
          type: string
    DdosRule:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        url_pattern:
          $ref: '#/components/schemas/GlobPattern'
        sources:
          type: array
          maxItems: 20
          items:
            $ref: '#/components/schemas/CIDR'
        description:
          type: string
        action:
          type: string
          enum: [ passthrough, protect ]
        is_enabled:
          type: boolean
    DdosRuleResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/DdosRule'
    DdosRuleData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/DdosRule'
    RateLimitSettings:
      type: object
      properties:
        ddos_detection:
          type: boolean
        exclude_sources:
          type: array
          items:
            $ref: '#/components/schemas/CIDR'
    RateLimitSettingsData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/RateLimitSettings'
    RateLimitRule:
      allOf:
        - $ref: '#/components/schemas/BaseRateLimitRule'
      properties:
        action_details:
          $ref: '#/components/schemas/ChallengeAction'
    RateLimitRuleView:
      allOf:
        - $ref: '#/components/schemas/BaseRateLimitRule'
      properties:
        action_details:
          type: object
    BaseRateLimitRule:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        action:
          type: string
          default: "block"
          enum: [ challenge, block ]
        is_enabled:
          type: boolean
        url_pattern:
          $ref: '#/components/schemas/GlobPattern'
        description:
          type: string
          nullable: true
        exclude_sources:
          type: array
          items:
            $ref: '#/components/schemas/CIDR'
        rate:
          type: integer
          minimum: 1
          maximum: 4000000
        burst:
          type: integer
          minimum: 1
          maximum: 4000000
        block_duration:
          type: integer
          minimum: 0
          maximum: 86400
        time_duration:
          type: integer
          minimum: 1
          maximum: 2592000
        allowed_methods:
          type: array
          items:
            type: string
            enum:
              - POST
              - GET
              - PUT
              - HEAD
              - DELETE
      required:
        - url_pattern
        - rate
        - time_duration
    RateLimitRuleData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/RateLimitRuleView'
    CIDR:
      type: string
      format: CIDR
      example: 1.2.3.4/32
    GlobPattern:
      type: string
      format: glob pattern
      description: |
        - `?` matches any single character.
        - `*` matches any (possibly empty) sequence of characters.
        - `**` matches the current directory and arbitrary subdirectories. This sequence must form a single path component, so both `**a` and `b**` are invalid and will result in an error. A sequence of more than two consecutive `*` characters is also invalid.
        - `[...]` matches any character inside the brackets. Character sequences can also specify ranges of characters, as ordered by Unicode, so e.g. `[0-9]` specifies any character between 0 and 9 inclusive. An unclosed bracket is invalid.
        - `[!...]` is the negation of `[...]`, i.e. it matches any characters not in the brackets.
        - The metacharacters `?`, `*`, `[`, `] `can be matched by using brackets (e.g. `[?]`). When a `]` occurs immediately following `[` or `[!` then it is interpreted as being part of, rather then ending, the character set, so `]` and NOT `]` can be matched by `[]]` and `[!]]` respectively. The - character can be specified inside a character sequence pattern by placing it at the start or the end, e.g. `[abc-]`.
    ReprioritizeRuleRequest:
      type: object
      properties:
        rule_id:
          type: string
          format: uuid
          description: ID of the rule you want to move
        after_rule_id:
          type: string
          format: uuid
          description: ID of the rule you want to be prior to the selected rule
        before_rule_id:
          type: string
          format: uuid
          description: ID of the rule you want to follow the selected rule
      required: [ rule_id ]
    PrioritizePoolAfter:
      type: object
      properties:
        pool_id:
          type: string
          format: uuid
          description: ID of the pool you want to move
        after_pool_id:
          type: string
          format: uuid
          description: ID of the pool you want to be prior to the selected pool
      required: [ pool_id, after_pool_id ]
    PrioritizePoolBefore:
      type: object
      properties:
        pool_id:
          type: string
          format: uuid
          description: ID of the pool you want to move
        before_pool_id:
          type: string
          format: uuid
          description: ID of the pool you want to follow the selected pool
      required: [ pool_id, before_pool_id ]
    PrioritizePool:
      anyOf:
        - $ref: "#/components/schemas/PrioritizePoolAfter"
        - $ref: "#/components/schemas/PrioritizePoolBefore"
    CdnAppLikeStats:
      type: object
      readOnly: true
      properties:
        likes_count:
          type: integer
        dislikes_count:
          type: integer
    CdnAppLikeStatsData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/CdnAppLikeStats'
    CdnAppLike:
      type: object
      properties:
        like:
          type: boolean
          nullable: true
          description: True means she likes, False means she dislikes, null means she wants to get her vote back.
    CdnApp:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        categories:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationCategory'
        rank:
          type: number
          example: 5
        name:
          type: string
        slug:
          type: string
        short_description:
          type: string
        description:
          type: string
        logo:
          type: string
          description: 'absolute link to logo image'
        pictures:
          type: array
          items:
            type: string
            format: url
        vendor:
          type: string
        support_email:
          type: string
          format: email
        install_json:
          $ref: '#/components/schemas/InstallJson'
        status:
          type: string
          enum: [ "published", "draft" ]
        like_stats:
          $ref: '#/components/schemas/CdnAppLikeStats'
        like_by_user:
          type: boolean
          description: True means she likes, False means she dislikes. null means she did not vote.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    CdnAppInstall:
      type: object
      properties:
        is_install:
          type: boolean
    CdnAppData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/CdnApp'
    DomainCdnApp:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        domain_id:
          type: string
          format: uuid
          readOnly: true
        application_id:
          type: string
          format: uuid
          readOnly: true
        active:
          type: boolean
        options:
          $ref: '#/components/schemas/AppOptions'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    CdnAppTriggerWebhook:
      type: object
      properties:
        event:
          type: string
          enum: [ before-new-install, new-install ]
        options:
          $ref: '#/components/schemas/AppOptions'
          nullable: true
      required: [ event, options ]
    InstallJson:
      type: object
    AppOptions:
      type: object
    Certificate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          type: string
          enum: [ arvan, user ]
          readOnly: true
        key_type:
          type: string
          enum: [ ec, rsa ]
          readOnly: true
          nullable: true
        domain_names:
          type: array
          items:
            type: string
          readOnly: true
        issuer:
          type: string
          readOnly: true
        expiry_date:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    CertificateOrder:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        order_id:
          type: string
          format: int32
          readOnly: true
        status:
          type: string
          readOnly: true
          enum: [ unprocessed, pending, processing, ready, valid, invalid, canceled, terminated, killed ]
          description: |
            - `unprocessed` - Order is in the process queue
            - `canceled` - Order is canceled in favor of a new one with updated subject names
            - `pending` - Authorization Challenges are set, Validating authorization challenges...
            - `ready` - Challenges are validated, ready to issue the certificate
            - `processing` - Issuing Certificate...
            - `valid` - Certificate is issued successfully, this is the final stage
            - `invalid` - An Error Occurred, this order cannot proceed anymore, a new order will be created automatically
            - `terminated` - An Unknown Error occurred, this order cannot proceed anymore, a new order will be created automatically
            - `killed` - Order failed despite many retries, will not proceed anymore nor retry, needs manual intervention
        domain_names:
          type: array
          readOnly: true
          items:
            type: string
        errors:
          readOnly: true
          type: array
          items:
            type: object
        expiry_date:
          description: 'Expired order is treated as invalid order'
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    Ssl:
      type: object
      properties:
        fingerprint_status:
          type: boolean
          description: Whether Domain is using fingerprint or not
        ssl_status:
          type: boolean
          description: Whether Domain is using ssl module or not
        certificate_mode:
          readOnly: true
          type: string
          enum: [ "managed", "custom" ]
          description: 'Indicates certificate is managed by arvan, or its up to the user'
        tls_version:
          type: string
          description: Minimum version of TLS. Empty ('') means default.
          enum: [ '', 'TLSv1', 'TLSv1.1', 'TLSv1.2', 'TLSv1.3' ]
        hsts_status:
          type: boolean
          description: Whether HSTS is enabled
        hsts_max_age:
          type: string
          enum: [ "1mo","2mo","3mo","4mo","5mo","6mo","12mo","24mo" ]
          description: HSTS max age directive
        hsts_subdomain:
          type: boolean
        hsts_preload:
          type: boolean
        https_redirect:
          type: boolean
        replace_http:
          type: boolean
          description: Replace HTTP with HTTPs in HTML and JS sources
        certificate_key_type:
          type: string
          enum:
            - "rsa"
            - "ec"
        certificates:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/Certificate'
        orders:
          description: returns all "certificate orders" since the last invalid or canceled order
          readOnly: true
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/CertificateOrder'
    SslResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/Ssl'
    CertificateStore:
      type: object
      properties:
        certificate:
          type: string
          format: binary
        private_key:
          type: string
          format: binary
    LogForwarderSummary:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        connection_type:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: boolean
    TransportLayerProxy:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        status:
          type: string
          enum:
            - healthy
            - initializing
            - failed
          readOnly: true
        app_name:
          type: string
        description:
          type: string
        domain:
          type: string
          example: sub.example.com
        port:
          type: integer
          maximum: 65535
        ip:
          type: string
          nullable: true
        proxy_protocol:
          type: string
          enum:
            - off
            - send-proxy
            - send-proxy-v2
        balance_algorithm:
          type: string
          enum:
            - roundrobin
            - leastconn
            - source
        servers:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                format: hostname
              port:
                type: integer
              weight:
                type: integer
                minimum: 1
                maximum: 100
              check:
                type: string
                enum:
                  - enabled
                  - disabled
              fall:
                type: integer
                minimum: 1
              inter:
                type: integer
                minimum: 5
              rise:
                type: integer
                minimum: 1
        firewall_default_action:
          type: string
          enum:
            - allow
            - deny
        firewalls:
          type: array
          items:
            type: object
            properties:
              access:
                type: string
                enum:
                  - allow
                  - deny
              name:
                type: string
                minLength: 3
                maxLength: 100
              description:
                type: string
                minLength: 3
                maxLength: 500
              type:
                type: string
                enum:
                  - geo
                  - ip_range
              match:
                $ref: '#/components/schemas/TransportLayerProxyMatch'
              active:
                type: boolean
    TransportLayerProxyMatch:
      type: object
      oneOf:
        - $ref: '#/components/schemas/TransportLayerProxyMatchCountry'
        - $ref: '#/components/schemas/TransportLayerProxyMatchIp'
    TransportLayerProxyMatchCountry:
      type: string
      pattern: '^[A-Za-z]{2}$'
      example: IR
      description: when type is geo
    TransportLayerProxyMatchIp:
      type: array
      description: when type is ip_range
      items:
        type: string
        format: ip range
    TransportLayerProxyResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/TransportLayerProxy'
    TransportLayerProxyStore:
      type: object
      required:
        - app_name
        - domain
        - port
        - proxy_protocol
        - balance_algorithm
        - firewall_default_action
      properties:
        app_name:
          type: string
        description:
          type: string
        domain:
          type: string
          example: sub.example.com
        port:
          type: integer
          maximum: 65535
        proxy_protocol:
          type: string
          enum:
            - off
            - send-proxy
            - send-proxy-v2
        balance_algorithm:
          type: string
          enum:
            - roundrobin
            - leastconn
            - source
        servers:
          type: array
          items:
            $ref: '#/components/schemas/TransportLayerProxyServer'
        firewall_default_action:
          type: string
          enum:
            - allow
            - deny
        firewalls:
          type: array
          items:
            $ref: '#/components/schemas/TransportLayerProxyFirewall'
    TransportLayerProxyUpdate:
      type: object
      required:
        - app_name
        - proxy_protocol
        - balance_algorithm
      properties:
        app_name:
          type: string
        description:
          type: string
        domain:
          type: string
          example: sub.example.com
        port:
          type: integer
          maximum: 65535
        proxy_protocol:
          type: string
          enum:
            - off
            - send-proxy
            - send-proxy-v2
        balance_algorithm:
          type: string
          enum:
            - roundrobin
            - leastconn
            - source
        servers:
          type: array
          items:
            $ref: '#/components/schemas/TransportLayerProxyServer'
        firewall_default_action:
          type: string
          enum:
            - allow
            - deny
        firewalls:
          type: array
          items:
            $ref: '#/components/schemas/TransportLayerProxyFirewall'
    TransportLayerProxyFirewall:
      type: object
      properties:
        access:
          type: string
          enum:
            - allow
            - deny
        name:
          type: string
          minLength: 3
          maxLength: 100
        description:
          type: string
          minLength: 3
          maxLength: 500
        type:
          type: string
          enum:
            - geo
            - ip_range
        match:
          $ref: '#/components/schemas/TransportLayerProxyMatch'
        active:
          type: boolean
    TransportLayerProxyServer:
      type: object
      required:
        - address
        - port
        - weight
        - check
      properties:
        address:
          type: string
          format: hostname
        port:
          type: integer
        weight:
          type: integer
          minimum: 1
          maximum: 100
        check:
          type: string
          enum:
            - enabled
            - disabled
        fall:
          type: integer
          minimum: 1
        inter:
          type: integer
          minimum: 5
        rise:
          type: integer
          minimum: 1
    SslUpdate:
      allOf:
        - $ref: '#/components/schemas/Ssl'
      properties:
        certificate:
          type: string
          description: a user uploaded certificate's uuid or `managed`
          example:
            - "managed"
            - "4e0de55d-96f5-471b-8ee5-f2667738320e"
        certificate_key_type:
          type: string
          enum:
            - "rsa"
            - "ec"
    HealthCheckReportDetail:
      type: object
      properties:
        date:
          type: string
          format: datetime
        zone:
          type: string
        upstream:
          type: string
        status:
          type: boolean
        message:
          type: string
    HealthCheckReportSummaryDetail:
      type: object
      properties:
        date:
          type: string
          format: datetime
        status:
          type: boolean
    HealthCheckReportSummary:
      type: object
      properties:
        zone:
          type: string
        status:
          type: boolean
        total:
          type: integer
        failed:
          type: integer
        details:
          type: array
          items:
            $ref: '#/components/schemas/HealthCheckReportSummaryDetail'
    HealthCheckRequestConfig:
      oneOf:
        - $ref: "#/components/schemas/HttpConfig"
        - $ref: "#/components/schemas/TcpConfig"
    HealthCheckView:
      allOf:
        - $ref: '#/components/schemas/BaseHealthCheck'
      properties:
        request_config:
          type: object
    HealthCheck:
      allOf:
        - $ref: '#/components/schemas/BaseHealthCheck'
      properties:
        request_config:
          $ref: "#/components/schemas/HealthCheckRequestConfig"
    BaseHealthCheck:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        description:
          type: string
        origin:
          type: string
          description: 'can be IP/Host when type is `upstream`, otherwise it must be a valid record ID'
        origin_type:
          type: string
          enum: [ pool ]
        upstreams:
          type: array
          items:
            type: string
            example: 1.1.1.1
        interval:
          type: integer
          minimum: 15000
          description: 'In milliseconds'
        threshold:
          type: integer
          minimum: 1
        type:
          type: string
          enum: [ TCP,HTTP,HTTPS ]
        status:
          type: boolean
          default: true
          description: 'The health-check is off or on'
        retries:
          type: integer
          minimum: 0
          maximum: 10
          description: "Number of immediate retries in case of a timeout"
        zones:
          type: array
          items:
            $ref: "#/components/schemas/HealthCheckZone"
        monitoring_updated_at:
          type: string
          format: date-time
          nullable: true
    HttpConfig:
      type: object
      required:
        - method
        - port
        - path
        - expected_response
        - allow_insecure
        - timeout
        - headers
      properties:
        method:
          type: string
          enum: [ HEAD, GET, POST, PUT ]
        port:
          type: integer
          minimum: 1
          maximum: 65535
        path:
          description: path for test
          type: string
        allow_insecure:
          type: boolean
        expected_response:
          $ref: "#/components/schemas/ExpectedResponse"
        headers:
          type: object
          additionalProperties:
            type: string
        follow_redirects:
          type: boolean
          readOnly: true
        timeout:
          type: integer
          minimum: 1
          maximum: 30000
          description: "In milliseconds"
    TcpConfig:
      type: object
      required:
        - port
        - timeout
      properties:
        port:
          type: integer
          minimum: 1
          maximum: 65535
        timeout:
          type: integer
          minimum: 1
          maximum: 10000
          description: "In milliseconds"
    HealthCheckZone:
      type: object
      properties:
        id:
          type: string
        monitoring_level:
          type: string
          enum:
            - critical
            - non-critical
            - off
    HealthCheckZoneName:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    ExpectedResponse:
      type: object
      properties:
        codes:
          type: array
          description: 'List of expected http status code'
          items:
            type: integer
        headers:
          $ref: "#/components/schemas/Headers"
        body:
          type: string
    Headers:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    MonitoringStatus:
      type: string
      nullable: true
      enum:
        - "off"
        - "no-data"
        - "healthy"
        - "unhealthy"
    HealthCheckResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/HealthCheckView'
    FeaturePrice:
      type: object
      properties:
        metric_key:
          type: string
        currency:
          type: string
        value:
          type: number
      nullable: true
    UsageLimit:
      type: object
      properties:
        min:
          type: integer
        max:
          type: integer
      nullable: true
    FeaturePricing:
      type: object
      properties:
        free_tier:
          type: integer
        flat:
          $ref: '#/components/schemas/FeaturePrice'
        per_unit:
          $ref: '#/components/schemas/FeaturePrice'
      nullable: true
    Currency:
      type: object
      properties:
        key:
          type: string
          enum:
            - irr
            - eur
        label:
          type: string
    PlanInfo:
      type: object
      properties:
        key:
          type: string
          example: 'enterprise'
        name:
          type: string
        monthly_cost:
          type: number
        discount:
          type: number
          description: between 0 to 100 is the percentage of the discount
        needed_balance:
          type: number
          description: How much balance the account needs for selected plan
    Plans:
      type: array
      items:
        $ref: '#/components/schemas/PlanInfo'
    FeaturePlanDefinition:
      type: object
      properties:
        meta:
          type: object
          properties:
            labels:
              type: array
              items:
                anyOf:
                  - type: string
                  - type: boolean
            tip:
              type: string
            available_params:
              type: array
              items:
                type: object
        usage_limit:
          $ref: '#/components/schemas/UsageLimit'
        pricing:
          $ref: '#/components/schemas/FeaturePricing'
      nullable: true
    FeatureDefinition:
      type: object
      properties:
        id:
          type: string
        plans:
          type: object
          properties:
            0:
              $ref: '#/components/schemas/FeaturePlanDefinition'
            1:
              $ref: '#/components/schemas/FeaturePlanDefinition'
            2:
              $ref: '#/components/schemas/FeaturePlanDefinition'
            3:
              $ref: '#/components/schemas/FeaturePlanDefinition'
            4:
              $ref: '#/components/schemas/FeaturePlanDefinition'
        meta:
          type: object
          properties:
            label:
              type: string
            description:
              type: string
    FeatureSet:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        features:
          type: array
          items:
            $ref: '#/components/schemas/FeatureDefinition'
    EstimatedCost:
      type: object
      properties:
        period:
          type: string
          enum:
            - monthly
            - dayly
            - hourly
        currency:
          type: string
          enum:
            - IRT
            - EUR
        value:
          type: number
    FeatureUsage:
      type: object
      properties:
        feature_id:
          type: string
        pricing:
          $ref: '#/components/schemas/FeaturePricing'
        estimated_cost:
          $ref: '#/components/schemas/EstimatedCost'
        usage:
          type: number
    Violations:
      type: object
      properties:
        violations:
          type: object
          properties:
            paygo:
              type: array
              items:
                type: string
            basic:
              type: array
              items:
                type: string
            growth:
              type: array
              items:
                type: string
            professional:
              type: array
              items:
                type: string
            enterprise:
              type: array
              items:
                type: string
    Usages:
      type: object
      properties:
        feature_usages:
          type: array
          items:
            $ref: '#/components/schemas/FeatureUsage'
        estimated_cost:
          $ref: '#/components/schemas/EstimatedCost'
    FeatureSets:
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
        plans:
          $ref: '#/components/schemas/Plans'
        feature_sets:
          type: array
          items:
            $ref: '#/components/schemas/FeatureSet'
    PlanResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/FeatureSets'
    CachingPurge:
      type: object
      required:
        - "purge"
      properties:
        purge:
          type: string
          enum: [ all, individual, tags ]
          description: tags is deprecated
        purge_urls:
          description: URLs to be purged from cache. Required if purge value is set to individual.
          type: array
          minItems: 1
          maxItems: 50
          items:
            type: string
            format: url
        purge_tags:
          deprecated: true
          description: |
            Tags to be purged from cache. Required if purge value is set to tags.
            Each tag must be 32 characters or less. Only ASCII characters are acceptable.
          type: array
          minItems: 1
          maxItems: 100
          items:
            type: string
    DomainPurgeTags:
      type: object
      properties:
        domain_id:
          type: string
          format: uuid
        tags:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ApplicationCategory:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        active:
          type: boolean
        order:
          type: integer
        name_translation:
          type: object
          nullable: true
          properties:
            "en":
              type: object
              properties:
                name:
                  type: string
            "fa":
              type: object
              properties:
                name:
                  type: string
        applications:
          type: array
          maxItems: 10
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                readOnly: true
              slug:
                type: string
              name:
                type: string
              description:
                type: string
              logo:
                type: string
    CloneDomain:
      type: object
      required:
        - from
      properties:
        from:
          type: string
          format: hostname
    BypassAction:
      type: object
      properties:
        rlimit:
          type: boolean
        challenge:
          type: boolean
        waf:
          type: boolean
    ChallengeAction:
      type: object
      properties:
        mode:
          type: integer
          enum: [ 1 , 2 , 3 ]
          "description": "The mode of mitigation (1: Cookie, 2: Javascript, 3: Captcha)"
        ttl:
          type: integer
          minimum: 10
          maximum: 31536000
        https_only:
          type: boolean
    DynamicField:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        description:
          type: string
          nullable: true
        namespace:
          type: string
          readOnly: true
        type:
          type: string
          enum: [ ip, number, byte ]
        scope:
          type: string
          enum: [ public, private ]
          readOnly: true
        values:
          $ref: '#/components/schemas/DynamicFieldValues'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - name
        - type
        - values
    DynamicFieldResponse:
      allOf:
        - $ref: '#/components/schemas/DataWithMessageResponse'
      properties:
        data:
          $ref: '#/components/schemas/DynamicField'
    DynamicFieldData:
      allOf:
        - $ref: '#/components/schemas/DataResponse'
      properties:
        data:
          $ref: '#/components/schemas/DynamicField'
    DynamicFieldValues:
      type: array
      items:
        $ref: "#/components/schemas/DynamicFieldValue"
    DynamicFieldValue:
      type: object
      properties:
        value:
          $ref: '#/components/schemas/DynamicFieldType'
        desc:
          type: string
        created_at:
          type: string
          readOnly: true
    DynamicFieldType:
      oneOf:
        - $ref: '#/components/schemas/DynamicFieldIpType'
        - $ref: '#/components/schemas/DynamicFieldByteType'
        - $ref: '#/components/schemas/DynamicFieldNumberType'
    UnprocessableEntityErrorObject:
      type: object
      additionalProperties:
        type: string
      nullable: true
      description: List of parameters and related errors
    UnprocessableEntityErrorArray:
      type: array
      items:
        type: array
        items:
          type: string
      description: List of error messages
    UnprocessableEntityErrorStringArray:
      type: array
      items:
        type: string
      description: List of error messages
    UnprocessableEntityErrorArrays:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
      description: List of error messages
    DynamicFieldIpType:
      title: IP
      type: string
      description: IPv4 or IPv6
    DynamicFieldNumberType:
      title: Number
      type: number
    DynamicFieldByteType:
      title: Byte
      type: string
      format: byte
    MessageResponse:
      type: object
      properties:
        message:
          type: string
  responses:
    UnprocessableEntityError:
      description: The given data was invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: boolean
                default: false
              message:
                type: string
              errors:
                oneOf:
                  - $ref: '#/components/schemas/UnprocessableEntityErrorStringArray'
                  - $ref: '#/components/schemas/UnprocessableEntityErrorArray'
                  - $ref: '#/components/schemas/UnprocessableEntityErrorArrays'
                  - $ref: '#/components/schemas/UnprocessableEntityErrorObject'
    OK:
      description: Successful
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageResponse'
    Conflict:
      description: Coflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageResponse'
    Error:
      description: Failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageResponse'
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageResponse'
    AccessDenied:
      description: Access denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageResponse'
    TrottleRequests:
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageResponse'
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/MessageResponse'
            properties:
              status:
                type: boolean
                default: false
  securitySchemes:
    UserToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKey:
      type: apiKey
      in: header
      name: Authorization
